def relationship(transformed_business_entity, transformed_contacts, transformed_df):
    
    # Get vendor contact names from transformed_df
    vendor_names_df = transformed_df.select(
        col("stg_business_entity_id"),
        col("vendor_contact_name").alias("contact_name")
    ).distinct()

    # Joining this with transformed_contacts to get the accurate business_entity_contact_id
    preferred_contacts = vendor_names_df.join(
        transformed_contacts.select("stg_business_entity_id", "contact_name", "business_entity_contact_id"),
        on=["stg_business_entity_id", "contact_name"],
        how="inner"
    ).distinct()
    
    print("hi 1")
    # Print column names for debugging
    print("transformed_business_entity columns:", transformed_business_entity.columns)
    print("transformed_df columns:", transformed_df.columns)

    # Create a mapping from client_name to stg_business_entity_id using business_entity_details
    client_mapping = transformed_business_entity.select(
        col("business_entity_name").alias("client_name"),
        col("stg_business_entity_id").alias("client_stg_business_entity_id")
    )
    
    print("hi 2")

    # Initialize list to collect all relationship DataFrames
    relationship_dfs = []
    
    # 1. Create client -> firm relationships first (for distinct clients)
    # Filter out empty/null stg_business_entity_id and join with transformed_df to get required columns
    distinct_clients = transformed_df.select(
        "client_name", 
        "stg_business_entity_id",
        "client_vendor_id",
        "client_vendor_site_id", 
        "client_ecid",
        "supplier_ecid",
        "associated_tax_ids"
    ).filter(
        col("client_name").isNotNull() & 
        (col("client_name") != "") &
        col("stg_business_entity_id").isNotNull() & 
        (col("stg_business_entity_id") != "") &
        (col("stg_business_entity_id") != "null") &
        (col("stg_business_entity_id") != "none")
    ).distinct()
    
    client_firm_df = distinct_clients.join(
        client_mapping,
        on="client_name",
        how="inner"
    ).select(
        col("client_stg_business_entity_id").alias("stg_business_entity_id"),
        lit(None).alias("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("client").alias("business_entity_role"),
        lit("firm").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("supplier_ecid"),
        col("associated_tax_ids")
    )
    
    relationship_dfs.append(client_firm_df)
    print("hi 3")
    
    # 2. Create supplier -> client relationships
    # Filter out empty/null stg_business_entity_id
    supplier_client_base = transformed_df.filter(
        col("stg_business_entity_id").isNotNull() & 
        (col("stg_business_entity_id") != "") &
        (col("stg_business_entity_id") != "null") &
        (col("stg_business_entity_id") != "none")
    ).join(
        client_mapping,
        on="client_name",
        how="inner"
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left"
    )
    
    supplier_client_df = supplier_client_base.select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        col("client_stg_business_entity_id").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("supplier").alias("business_entity_role"),
        lit("buyer").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("supplier_ecid"),
        col("associated_tax_ids")
    )
    
    relationship_dfs.append(supplier_client_df)
    
    # 3. Create supplier -> firm relationships (only when supplier_ecid is not null/empty)
    supplier_firm_base = transformed_df.filter(
        col("supplier_ecid").isNotNull() & 
        (col("supplier_ecid") != "") & 
        (col("supplier_ecid") != "NULL") &
        col("stg_business_entity_id").isNotNull() & 
        (col("stg_business_entity_id") != "") &
        (col("stg_business_entity_id") != "null") &
        (col("stg_business_entity_id") != "none")
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left"
    )
    
    supplier_firm_df = supplier_firm_base.select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("client").alias("business_entity_role"),
        lit("firm").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("supplier_ecid"),
        col("associated_tax_ids")
    )
    print("hi 4")
    relationship_dfs.append(supplier_firm_df)
    
    # Union all relationship DataFrames
    union_df = relationship_dfs[0]
    for df in relationship_dfs[1:]:
        union_df = union_df.union(df)
    print("hi 5")
    
    # Drop duplicates
    union_df = union_df.dropDuplicates()

    print("hi 6")
    return union_df

# Call the `relationship` function and assign the result to `transformed_relationship`
transformed_relationship = relationship(transformed_business_entity_details, transformed_contacts, transformed_df)

transformed_relationship = transformed_relationship.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
)
print("hi 7")

# Remove the line that renames "related_business_entity_id" since it doesn't exist in our schema
# transformed_relationship = transformed_relationship.withColumnRenamed("related_business_entity_id", "stg_related_business_entity_id")

# Check for void data types before proceeding
print("Data types in transformed_relationship:")
for col_name, col_type in transformed_relationship.dtypes:
    print(f"{col_name}: {col_type}")
print("hi 8")

# Find columns with void data type
void_columns = [col_name for col_name, col_type in transformed_relationship.dtypes if col_type == 'void']
print(f"Void columns found: {void_columns}")
print("hi 9")

if void_columns:
    print(f"Fixing void columns: {void_columns}")
    for void_col in void_columns:
        transformed_relationship = transformed_relationship.withColumn(
            void_col, 
            lit(None).cast(StringType())  # Cast void to nullable string
        )

# Generate UUID for business_entity_relationship_id
transformed_relationship_columns = [
    col for col in transformed_relationship.columns 
    if col not in ['client_ecid', 'client_vendor_id', 'client_vendor_site_id', 'supplier_ecid']
]

transformed_relationship = transformed_relationship.withColumn(
    "business_entity_relationship_id",
    compute_uuid_udf(struct(*[col(c) for c in transformed_relationship_columns]))
)
# transformed_relationship = transformed_relationship.withColumn(
#     "business_entity_relationship_id",
#     compute_uuid_udf(struct(*transformed_relationship.columns))
# )

# Show distinct rows in the resulting DataFrame
transformed_relationship.distinct().show(truncate=False)

# Select and rename columns from `transformed_relationship`
transformed_rel_identifiers = transformed_relationship.select(
    col("stg_business_entity_id"),
    col("business_entity_relationship_id"),
    col("client_vendor_id"),
    col("client_vendor_site_id"),
    col("client_ecid"),
    col("supplier_ecid"),
    col("associated_tax_ids")
)

# List of columns to melt for `transformed_rel_identifiers`
transformed_rel_identifiers_columns = ["client_vendor_id", "client_vendor_site_id", "client_ecid","supplier_ecid","associated_tax_ids"]

# Melt `transformed_rel_identifiers` using the `melt_dataframe` function
transformed_rel_identifiers = utl.melt_dataframe(
    transformed_rel_identifiers,
    id_column="business_entity_relationship_id",
    columns_to_melt=transformed_rel_identifiers_columns,
    melted_column_names=("identifier_type", "identifier_value")
)


# Perform a left join between `transformed_identifiers` and `transformed_rel_identifiers`
transformed_rel_identifiers = transformed_rel_identifiers.join(
    transformed_relationship,
    on="business_entity_relationship_id",  # Use the common column for the join
    how="inner"
)

transformed_rel_identifiers = transformed_rel_identifiers.select(
    col("identifier_type"),
    col("identifier_value"),
    col("business_entity_relationship_id").alias("related_identifier")).withColumn("related_identifier_source", lit("relationship"))

 
#transformed_rel_identifiers.show(truncate=False)

relationship_key_pairs = transformed_rel_identifiers.select(
    "identifier_type", "identifier_value"
).distinct()

# Select columns from `transformed_df` for `transformed_identifiers`
transformed_identifiers = transformed_df.select(*ss.identifiers)

# Melt `transformed_identifiers` using the `melt_dataframe` function
melted_business_identifiers = utl.melt_dataframe(
    transformed_identifiers,
    id_column="stg_business_entity_id",
    columns_to_melt=ss.transformed_identifiers_columns,
    melted_column_names=("identifier_type", "identifier_value")
)


#Apply Anti-join using only identifier_type + identifier_value
filtered_business_identifiers = melted_business_identifiers.alias("biz").join(
    broadcast(relationship_key_pairs).alias("rel"),
    on=[
        col("biz.identifier_type") == col("rel.identifier_type"),
        col("biz.identifier_value") == col("rel.identifier_value")
    ],
    how="left_anti"
)

# Final selection with source
transformed_identifiers = filtered_business_identifiers.select(
    col("identifier_type"),
    col("identifier_value"),
    col("stg_business_entity_id").alias("related_identifier")
).withColumn("related_identifier_source", lit("business_entity"))


#transformed_identifiers.show(truncate=False)


# # Perform a left join between `transformed_identifiers` and `transformed_rel_identifiers`
# transformed_identifiers = transformed_identifiers.join(
#     transformed_rel_identifiers,
#     on="stg_business_entity_id",  # Use the common column for the join
#     how="left"
# # 

transformed_identifiers = transformed_identifiers.union(transformed_rel_identifiers)

# Drop duplicates
transformed_identifiers = transformed_identifiers.dropDuplicates()

transformed_identifiers = transformed_identifiers.filter(
    col("identifier_value").isNotNull()
)

# Update identifier_type column in transformed_identifiers
transformed_identifiers = transformed_identifiers.withColumn(
    "identifier_type",
    when(col("identifier_type") == "client_ecid", "ecid")
    .when(col("identifier_type") == "supplier_ecid", "ecid")
    .otherwise(col("identifier_type"))
)

transformed_identifiers = transformed_identifiers.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
)


transformed_identifiers = transformed_identifiers.withColumn(
    "identifier_id",
    compute_uuid_udf(struct(*transformed_identifiers.columns))
)

# Show the resulting DataFrame
transformed_identifiers.show(truncate=False)



identifiers logic is not working as expected

this is the data in transformed_relationship

stg_business_entity_id	business_entity_contact_id	stg_related_business_entity_id	related_business_entity_contact_id	business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid	associated_tax_ids	is_active	business_entity_relationship_id
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	40763		538669316			TRUE	f3ab4502-07bd-db44-1f36-0d6341c0529e
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	17217		538669316	344352238		TRUE	f3ab4502-07bd-db44-1f36-0d6341c0529e
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	37829		538669316			TRUE	f3ab4502-07bd-db44-1f36-0d6341c0529e
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	23		538669316		411234968	TRUE	69d855f0-8e11-2d59-d09f-99c76b0fbfcf
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	37		538669316			TRUE	f3ab4502-07bd-db44-1f36-0d6341c0529e
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	671		538669316	17715908		TRUE	f3ab4502-07bd-db44-1f36-0d6341c0529e
bb47d9f7-c631-a592-a734-8221082535bf		2d35a04a-5fdf-50d5-7750-c1c7621ddc33		client	firm	19590		538669316		330961947	TRUE	8bb51a5c-eebe-7fa8-a99b-c96957f00cfe


for this stg_business_entity_id bb47d9f7-c631-a592-a734-8221082535bf there is not even single record data in transformed_identifiers

sample data in transformed_identifiers
identifier_type	identifier_value	related_identifier	related_identifier_source	is_active	identifier_id
client_vendor_id	36113	e641ba79-48a0-56af-79b1-1d4e8f970ab3	business_entity	TRUE	605b25e6-4ced-823a-2c37-bfe0047311e8
ecid	538669316	fc6485bc-d819-155f-d780-0021902f1d60	business_entity	TRUE	5991af84-df96-e3e0-f6de-20977dd75c46
ecid	538669316	bcea1d44-3b0e-b1c4-90f4-0522c177aef6	business_entity	TRUE	909e74d1-4348-b59c-b1df-78419d26a34b
ecid	538669316	b4d67cfd-bde7-fe3c-f491-9576fd82955e	business_entity	TRUE	285e52db-4bca-8254-4bd6-91736702f3ad
