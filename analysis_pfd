# Method 1: Using list comprehension (recommended)
# Read from config file (assuming ss.revenue contains your config list)
expected_revenue_columns = [col for col in ss.revenue if col != "stg_business_entity_id"]

# Method 2: Using filter() function
expected_revenue_columns = list(filter(lambda x: x != "stg_business_entity_id", ss.revenue))

# Method 3: Create a copy and remove (if you want to preserve original)
expected_revenue_columns = ss.revenue.copy()
if "stg_business_entity_id" in expected_revenue_columns:
    expected_revenue_columns.remove("stg_business_entity_id")

# Method 4: Using set difference (if order doesn't matter)
expected_revenue_columns = list(set(ss.revenue) - {"stg_business_entity_id"})

# Method 5: Remove multiple columns if needed
columns_to_exclude = ["stg_business_entity_id", "some_other_column"]
expected_revenue_columns = [col for col in ss.revenue if col not in columns_to_exclude]

# Method 6: More explicit approach with error handling
expected_revenue_columns = ss.revenue.copy()
try:
    expected_revenue_columns.remove("stg_business_entity_id")
    print("Removed stg_business_entity_id from expected columns")
except ValueError:
    print("stg_business_entity_id not found in config list")

# Example usage in your context:
print("Original config columns:", ss.revenue)

# Remove stg_business_entity_id since it's not created by flattening
expected_revenue_columns = [col for col in ss.revenue if col != "stg_business_entity_id"]

print("Expected columns after flattening:", expected_revenue_columns)

# Check and create missing revenue columns with appropriate data types
print("Checking for missing revenue columns...")
for col_name in expected_revenue_columns:
    if col_name not in transformed_json_df.columns:
        print(f"Creating {col_name} column with null values")
        
        # Determine appropriate data type based on column name
        if "date" in col_name:
            transformed_json_df = transformed_json_df.withColumn(
                col_name, 
                lit(None).cast("date")
            )
        elif "amount" in col_name:
            transformed_json_df = transformed_json_df.withColumn(
                col_name, 
                lit(None).cast("double")
            )
        else:
            transformed_json_df = transformed_json_df.withColumn(
                col_name, 
                lit(None).cast("string")
            )
