def relationship(transformed_business_entity, transformed_contacts, transformed_df):
    from pyspark.sql import DataFrame
    from pyspark.sql.functions import col, lit, when, coalesce
    
    # Get vendor contact names from transformed_df
    vendor_names_df = transformed_df.select(
        col("stg_business_entity_id"),
        col("vendor_contact_name").alias("contact_name")
    ).distinct()

    # Joining this with transformed_contacts to get the accurate business_entity_contact_id
    preferred_contacts = vendor_names_df.join(
        transformed_contacts.select("stg_business_entity_id", "contact_name", "business_entity_contact_id"),
        on=["stg_business_entity_id", "contact_name"],
        how="inner"
    ).distinct()

    # Create base DataFrame with all required columns structure
    base_columns = [
        "stg_business_entity_id",
        "business_entity_contact_id", 
        "related_business_entity_id",
        "related_business_entity_contact_id",
        "business_entity_role",
        "related_business_entity_role",
        "client_vendor_id",
        "client_vendor_site_id", 
        "client_ecid",
        "associated_tax_ids"
    ]
    
    # Initialize list to collect all relationship DataFrames
    relationship_dfs = []
    
    # 1. Create supplier -> client relationships (when client_ecid is not null)
    supplier_client_df = transformed_df.filter(
        col("client_ecid").isNotNull() & (col("client_ecid") != "")
    ).join(
        transformed_business_entity,
        on="stg_business_entity_id",
        how="inner"
    ).join(
        preferred_contacts,
        on="stg_business_entity_id", 
        how="left"
    ).select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        col("client_ecid").alias("related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("Supplier").alias("business_entity_role"),
        lit("Client").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("associated_tax_ids")
    )
    
    relationship_dfs.append(supplier_client_df)
    
    # 2. Create supplier -> firm relationships (when supplier_ecid is not null/empty)
    supplier_firm_df = transformed_df.filter(
        col("supplier_ecid").isNotNull() & (col("supplier_ecid") != "")
    ).join(
        transformed_business_entity,
        on="stg_business_entity_id",
        how="inner" 
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left"
    ).select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("Client").alias("business_entity_role"),
        lit("Firm").alias("related_business_entity_role"),
        lit(None).alias("client_vendor_id"),
        lit(None).alias("client_vendor_site_id"),
        lit(None).alias("client_ecid"),
        lit(None).alias("associated_tax_ids")
    )
    
    relationship_dfs.append(supplier_firm_df)
    
    # 3. Create client -> firm relationships (for distinct clients)
    client_firm_df = transformed_df.filter(
        col("client_ecid").isNotNull() & (col("client_ecid") != "")
    ).select(
        col("client_ecid").alias("stg_business_entity_id")
    ).distinct().withColumn(
        "business_entity_contact_id", lit(None)
    ).withColumn(
        "related_business_entity_id", lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33")
    ).withColumn(
        "related_business_entity_contact_id", lit(None)
    ).withColumn(
        "business_entity_role", lit("Client")
    ).withColumn(
        "related_business_entity_role", lit("Firm")
    ).withColumn(
        "client_vendor_id", lit(None)
    ).withColumn(
        "client_vendor_site_id", lit(None)
    ).withColumn(
        "client_ecid", lit(None)
    ).withColumn(
        "associated_tax_ids", lit(None)
    )
    
    relationship_dfs.append(client_firm_df)
    
    # 4. Create supplier relationships for those without supplier_ecid (null or empty)
    # These only get supplier -> client mapping if they have client_ecid
    supplier_no_ecid_df = transformed_df.filter(
        (col("supplier_ecid").isNull() | (col("supplier_ecid") == "")) &
        col("client_ecid").isNotNull() & (col("client_ecid") != "")
    ).join(
        transformed_business_entity,
        on="stg_business_entity_id",
        how="inner"
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left" 
    ).select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        col("client_ecid").alias("related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("Supplier").alias("business_entity_role"),
        lit("Client").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("associated_tax_ids")
    )
    
    relationship_dfs.append(supplier_no_ecid_df)
    
    # Union all relationship DataFrames
    union_df = relationship_dfs[0]
    for df in relationship_dfs[1:]:
        union_df = union_df.union(df)
    
    # Drop duplicates
    union_df = union_df.dropDuplicates()
    
    return union_df

# Call the `relationship` function and assign the result to `transformed_relationship`
transformed_relationship = relationship(transformed_business_entity, transformed_contacts, transformed_df)

transformed_relationship = transformed_relationship.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
)
transformed_relationship = transformed_relationship.withColumnRenamed("related_business_entity_id", "stg_related_business_entity_id")
