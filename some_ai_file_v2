Skip header
Engineers
W619378
Skip navigation
EAC - ENVIRONMENT AS CODE
Community
AWS RDS Proxy


AWS RDS Proxy
Overview and Details for provisioning an AWS RDS Proxy using EaC.

Last Updated:
2025-02-21
Overview
This module allows you to create a RDS Proxy for an existing RDS Postgres DB.

Component Name: rdsproxy
Model Component Type: RDSProxy

Prerequisites
This component requires an AWS Aurora Postgres starting in ModulePack version 0.7.0+.

RDSProxy global prerequisites
RDS Proxy global config supports from ModulePack version 0.14.4 and above, RDS Postgres Database should be provisioned or upgraded to ModulePack version 0.14.4+
In case of the global databases, stand alone rds-proxy module does not support the secret rotation in secondary region which is known issue to AWS RDS Proxy Secret Replication for Global Aurora Postgres Database
In order to mitigate the secret rotation in secondary region issue, users need to perform below 2 action
1- Create the secrets manager vpc endpoint in public subnets in all regions in case of global database(one can use RoutableVPCEndpoint component from EAC)
2- Once global RDSProxy infra got created, rotate the PROXYRW/PROXYRO secrets in both region (one time activity) as per below link
https://engineers.jpmchase.net/docs/databases/aws-rds-aurora-postgres/guides/replication/rds-proxy-secret-replication-for-global-database/#secret-rotation-using-rds-pr-role)
Environment Context
The user may specify these on a per-environment basis by modifying the appropriate entry in the deployment file generated by the EaC platform.

Parameter Name	Required	Description	Input Type	Default Value	Notes
engine_family	No	The db engine that this proxy will communicate with..	string	POSTGRESQL	
recovery_window_in_days	No	Number of days that AWS Secrets Manager waits before it can delete a secret. This value can be 0 to force deletion without recovery or range from 7 to 30 days. The default value is 30.	number	30	
idle_client_timeout	No	The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.	number	null	
custom_db_names	No	The names of your custom databases created in your cluster, you can use the same variable as your Aurora Postgres module	list(string)	[]	
debug_logging	No	Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs	boolean	false/td>	
interactive_reader_endpoint	No	Set to true if you are provisioning for interactive read-only access. Default set to false	boolean	false	
tags	No	Set to true if you are provisioning for interactive read-only access. Default set to false	map(object)	{}	
vpc_subnet_names	No	One or more VPC subnet names to associate with the new proxy. These subnets are the same subnets where the db is located(private subnets)	list(string)	[]	
db_name	No	The singular RDS DB name which RDS proxy will be setup for. (1-1 / 1-proxy-to-1-db)	string	""	
connection_pool_config	No	connection_pool_config blocks support the following: - connection_borrow_timeout - (Optional) The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions. - init_query - (Optional) One or more SQL statements for the proxy to run when opening each new database connection. Typically used with SET statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single SET statement, such as SET x=1, y=2. - max_connections_percent - (Optional) The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group. - max_idle_connections_percent - (Optional) Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the max_connections setting for the RDS DB instance or Aurora DB cluster used by the target group. - session_pinning_filters - (Optional) Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is EXCLUDE_VARIABLE_SETS	object({ connection_borrow_timeout= number init_query = string max_connections_percent = number max_idle_connections_percent = number session_pinning_filters = list(string) })	{connection_borrow_timeout = 120, max_connections_percent = 100, max_idle_connections_percent = 50}	
global_config	No	Specify globalDB parameters	object({ enabled = bool secondary_region = optional(string) secondary_vpc_subnet_names = optional(list(string)) primary_secrets_vpc_endpoint_dns_names = optional(list(string)) secondary_secrets_vpc_endpoint_dns_names = optional(list(string)) })	{ enabled = false secondary_region = "" secondary_vpc_subnet_names = [] primary_secrets_vpc_endpoint_dns_names = [] secondary_secrets_vpc_endpoint_dns_names = [] }	primary_secrets_vpc_endpoint_dns_names
List of dns names of secrets manager vpc endpoints in public subnets in primary regions. Users would need to create the secrets manager vpc endpoint in public subnets in all regions in case of global database. Example - vpce-07e71e00b6b2bcd89-r9mnx70d.secretsmanager.us-east-1.vpce.amazonaws.com secondary_secrets_vpc_endpoint_dns_names
List of dns names of secrets manager vpc endpoints in public subnets in secondary regions. Users would need to create the secrets manager vpc endpoint in public subnets in all regions in case of global database. Example - vpce-0d522a926c3219f8a-vfhegbjn.secretsmanager.us-west-2.vpce.amazonaws.com
Examples
We recommend that you do not copy and paste and leverage our Model and Deployment Schema to populate your files.
EaC gives you ability to auto populate your model file leveraging our model schema.
Model Schema will help users create a model file with an Auto-complete feature in IDE (VS-Code recommended with 'YAML' extension install ). This will help assist and avoid manual errors that may come up while writing a model file from scratch.
Press CTRL-SPACE for model autocompletion and assistance.
Runtime Model Configuration:
Runtime model configuration specifying RDS Proxy with Aurora Postgres

apiVersion: model/v1
kind: Model
metadata:
  type: InfraModel
  name:  '<a-name-for-your-model>'
  version: "v1" # Version for your model Eg. v1 or v2
  sealID: "<your-seal-id>"
  mutable: <Select true or false>
  patternName: "<select-a-pattern>"
spec:
  components:
    - type: KMS
      name: kms
    - type: RDSAuroraPostgres
      name: rds
      connectsTo:
        - type: KMS
          name: kms
    - type: RDSProxy
      name : proxy
      connectsTo:
        - type: RDSAuroraPostgres
          name: rds
    - type: EKSCluster
      name: eks
      connectsTo:
          - type: RDSProxy
            name: proxy
          - type: RDSAuroraPostgres
            name: rds
          - type: Roles
            name: roles
    - type: Roles
      name: roles
Deployment template configuration for RDS Proxy with Aurora Postgres.
apiVersion: deployment/v1
kind: Deployment
metadata:
  name: <a-name-for-your-deployment>
  model:
    name: <provide-your-model-name>
    version: v1 # Version that you have specified in your model file
  sealID: "<your-seal-id>"
spec:
  environment:
    awsAccountID: <Provide_aws_region_here>
    awsRegion: <Provide_aws_region_here>
    tfeOrganization: <Provide_tfe_organization_here>
  modulepack:
    name: default
    version: <Provide_ModulePack_Version_here>
  components:
    - type: EKSClusterBase
      name: eksbase
      action: apply <Add as Skip if you already have at the region level>
      properties: {}
    - type: NATGateway
      name: natgateway
      action: apply  <Add as Skip if you already have at the region level>
      properties: {}
    - type: PrivateVPCEndpoints
      name: vpcendpnts
      action: apply  <Add as Skip if you already have at the region level>
      properties: {}
    - type: EKSCluster
      name: eks
      action: apply
      properties:
        jet_fid: <Provide_jet_fid_here>
        provision_fid: <Provide_provision_fid_here>
        namespaces:
          - name: <Provide_name_for_namespace>
            service_accounts:
              - name: <Provide_name_for_service_account_here>
                role: "eks-role-1"
      connectsTo:
        - type: RDSAuroraPostgres
          name: rds
        - type: Roles
          name: roles
      dependsOn:
        - type: NATGateway
          name: natgateway
        - type: EKSClusterBase
          name: eksbase
        - type: PrivateVPCEndpoints
          name: vpcendpnts
    - type: KMS
      name: appdbkey
      action: apply
      properties:
        # Required
        key_alias: appdbkey
    - type: RDSAuroraPostgres
      name: rds
      action: apply
      properties:
          aurora_cluster_postgres_db_parameter_group_family: aurora-postgresql13
          aurora_instance_postgres_db_parameter_group_family: aurora-postgresql13
          database_name: "<Provide_database_name_here>"
      connectsTo:
          - type: KMS
            name: appdbkey
      dependsOn:
          - type: KMS
            name: appdbkey
          - type: PrivateVPCEndpoints
            name: vpcendpnts
    - type: RDSProxy
      name : proxy
      connectsTo:
        - type: RDSAuroraPostgres
          name: rds
    - type: Roles
      name: roles
      action: apply
      properties:
          roles:
            - access:
                - instanceVersion: v1
                  name: rds
                  modelVersion: v1
                  type: RDSAuroraPostgres
                  permissions:
                    readwrite_access: true
                - instanceVersion: v1
                  name: proxy
                  modelVersion: v1
                  type: RDSProxy
                  permissions:
                    proxy_readwrite_access : true
                    proxy_read_access: true
              assumable_service:
                - eks.amazonaws.com
              name: "eks-role-1"
NLB Connects To RDS Proxy Configuration
Follow these instructions to connect to the database through RDS Proxy via NLB

Use port 6130 when connecting to the RDS Proxy via the NLB ProxyLoginDetails

apiVersion: model/v1
kind: Model
metadata:
  type: InfraModel
  name: <provide-your-model-name>
  version: v1
  sealID: "109894"
  mutable: true
spec:
  components:
    - type: NetworkLoadBalancer
      name: nlb
      connectsTo:
        - type: RDSProxy
          name: proxy
        - type: RDSAuroraPostgres
          name: postgres
    - type: RDSProxy
      name: proxy
      connectsTo:
        - type: RDSAuroraPostgres
          name: postgres
    - type: RDSAuroraPostgres
      name: postgres
      connectsTo:
        - type: KMS
          name: kms
    - type: KMS
      name: kms
RDSProxy global configuration
apiVersion: model/v1
kind: Model
metadata:
  type: InfraModel
  name: rdsproxygm
  version: v1
  sealID: "109894"
  mutable: true
spec:
  components:
    - type: RDSAuroraPostgres
      name: rdsproxygl
      connectsTo:
        - type: KMS
          name: kmsproxygl
    - type: KMS
      name: kmsproxygl

    - type: RDSProxy
      name : proxy
      connectsTo:
        - type: RDSAuroraPostgres
          name: rdsproxygl

    - type: Lambda
      name: lambda2
      connectsTo:
        - type: RDSProxy
          name: proxy
        - type: Roles
          name: roles2

    - type: Roles
      name: roles2

    - type: RoutableVPCEndpoint
      name: secretvpce
References
Atlas Modules Bundled
Atlas Module	Version	Documentation	TF Bundle Requirements
rds-proxy	3.2.9	Terraform Module: RDS Proxy	1.3.6-20230811-JPMC
Change Log
ModulePack 0.14.4
TBD

CCBEAAS-9922 (Customer) RDS Aurora global Config is not creating RDS Proxy in secondary region
ModulePack 0.14.0
1/23/2025

CCBEAAS-9451 Add NLB Connects To RDS Proxy functionality
ModulePack 0.12.0
9/24/2024

CCBEAAS-17676: Add db_name property to allow rds-proxy setup to for a single DB (1-1 / 1-proxy-to-1-db)
ModulePack 0.7.0
1/16/2024

CCBEAAS-7611: Separate rds-proxy module from aurora postgress module
ON THIS PAGE

Overview
Prerequisites
RDSProxy global prerequisites
Examples
RDSProxy global configuration
References
Change Log
Back to Top
