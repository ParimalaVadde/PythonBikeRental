INSERT INTO sds_staging.business_entity_characteristics
(
    characteristics_id,
    stg_business_entity_id,
    characteristics_type,
    characteristic_value,
    is_active,
    last_updated_by,
    last_updated_date,
    created_by,
    created_date,
    business_validation_reason
)
WITH base_data AS (
    SELECT
        CAST(vendor_name_cleaned AS VARCHAR) AS vendor_name_cleaned,
        CAST(vendor_email AS VARCHAR) AS vendor_email,
        CAST(vendor_government_id AS VARCHAR) AS vendor_government_id,
        CAST(vendor_address_ln_1 AS VARCHAR) AS vendor_address_ln_1,
        CAST(industry_sector_dso_25 AS VARCHAR) AS industry_sector_dso_25,
        CAST(industry_sector_dso_50 AS VARCHAR) AS industry_sector_dso_50,
        CAST(industry_sector_dso_75 AS VARCHAR) AS industry_sector_dso_75,
        CAST(industry_group_dso_25 AS VARCHAR) AS industry_group_dso_25,
        CAST(industry_group_dso_50 AS VARCHAR) AS industry_group_dso_50,
        CAST(industry_group_dso_75 AS VARCHAR) AS industry_group_dso_75,
        CAST(vendor_credit_rating_moody AS VARCHAR) AS vendor_credit_rating_moody,
        CAST(vendor_credit_rating_sp AS VARCHAR) AS vendor_credit_rating_sp,
        CAST(vendor_credit_revolver_rate AS VARCHAR) AS vendor_credit_revolver_rate,
        CAST(vendor_cogs AS VARCHAR) AS vendor_cogs,
        CAST(ind_vc_campaign AS VARCHAR) AS ind_vc_campaign,
        CAST(virtualcard_accpetance_tier_legacy AS VARCHAR) AS virtualcard_accpetance_tier_legacy,
        CAST(virtualcard_accpetance_tier_model AS VARCHAR) AS virtualcard_accpetance_tier_model,
        CAST(virtualcard_accpetance_tier_userdefined AS VARCHAR) AS virtualcard_accpetance_tier_userdefined,
        CAST(ind_virtual_card_campaign_count AS VARCHAR) AS ind_virtual_card_campaign_count,
        CAST(vc_campaign_accepts AS VARCHAR) AS vc_campaign_accepts,
        CAST(registered_agents AS VARCHAR) AS registered_agents,
        CAST(buying_entity AS VARCHAR) AS buying_entity
    FROM sds_landing.analysis_pfd
),
entity_hash AS (
    SELECT 
        bd.*,
        encode(digest(CONCAT_WS('-', 
            COALESCE(bd.vendor_name_cleaned, ''), 
            COALESCE(bd.vendor_email, ''), 
            COALESCE(bd.vendor_government_id, ''),
            COALESCE(bd.vendor_address_ln_1, '')
        ), 'sha256'), 'hex') AS entity_hash_value
    FROM base_data bd
),
entity_id_mapping AS (
    SELECT
        eh.*,
        substring(entity_hash_value, 1, 8) || '-' ||
        substring(entity_hash_value, 9, 4) || '-' ||
        substring(entity_hash_value, 13, 4) || '-' ||
        substring(entity_hash_value, 17, 4) || '-' ||
        substring(entity_hash_value, 21, 12) AS stg_business_entity_id
    FROM entity_hash eh
),
buying_entities AS (
    SELECT DISTINCT
        CAST(buying_entity AS VARCHAR) AS buying_entity_name,
        encode(digest(COALESCE(buying_entity, ''), 'sha256'), 'hex') AS hash_value
    FROM base_data
    WHERE buying_entity IS NOT NULL
),
jpmc_entity AS (
    SELECT
        'JP Morgan Chase Bank N.A.' AS business_entity_name,
        encode(digest('JP Morgan Chase Bank N.A.', 'sha256'), 'hex') AS hash_value
),
buying_entity_mappings AS (
    SELECT
        buying_entity_name,
        hash_value,
        substring(hash_value, 1, 8) || '-' ||
        substring(hash_value, 9, 4) || '-' ||
        substring(hash_value, 13, 4) || '-' ||
        substring(hash_value, 17, 4) || '-' ||
        substring(hash_value, 21, 12) AS stg_business_entity_id
    FROM buying_entities
),
jpmc_mapping AS (
    SELECT
        business_entity_name,
        hash_value,
        substring(hash_value, 1, 8) || '-' ||
        substring(hash_value, 9, 4) || '-' ||
        substring(hash_value, 13, 4) || '-' ||
        substring(hash_value, 17, 4) || '-' ||
        substring(hash_value, 21, 12) AS stg_business_entity_id
    FROM jpmc_entity
),
-- Create a pivot table of characteristic types and transformation rules
char_types AS (
    SELECT * FROM (VALUES
        ('industry_sector_dso_25', 'industry_sector_dso_25', NULL, 'simple'),
        ('industry_sector_dso_50', 'industry_sector_dso_50', NULL, 'simple'),
        ('industry_sector_dso_75', 'industry_sector_dso_75', NULL, 'simple'),
        ('industry_group_dso_25', 'industry_group_dso_25', NULL, 'simple'),
        ('industry_group_dso_50', 'industry_group_dso_50', NULL, 'simple'),
        ('industry_group_dso_75', 'industry_group_dso_75', NULL, 'simple'),
        ('vendor_credit_rating_moody', 'Credit_Rating_Provider_Date', 'moody', 'rating'),
        ('vendor_credit_rating_sp', 'Credit_Rating_Provider_Date', 'sp', 'rating'),
        ('vendor_credit_revolver_rate', 'vendor_credit_revolver_rate', NULL, 'simple'),
        ('vendor_cogs', 'vendor_cogs', NULL, 'simple'),
        ('ind_vc_campaign', 'ind_vc_campaign', NULL, 'yn'),
        ('virtualcard_accpetance_tier_legacy', 'virtualcard_accpetance_tier_legacy', 'virtualcard_accpetance_tier_legacy', 'tier'),
        ('virtualcard_accpetance_tier_model', 'virtualcard_accpetance_tier_model', 'virtualcard_accpetance_tier_model', 'tier'),
        ('virtualcard_accpetance_tier_userdefined', 'virtualcard_accpetance_tier_userdefined', 'virtualcard_accpetance_tier_userdefined', 'tier'),
        ('ind_virtual_card_campaign_count', 'ind_virtual_card_campaign_count', 'ind_virtual_card_campaign_count', 'tier'),
        ('vc_campaign_accepts', 'vc_campaign_accepts', 'vc_campaign_accepts', 'tier')
    ) AS t(source_column, characteristic_type, additional_value, transform_type)
),
-- Generate characteristics for vendor entities (simple fields)
vendor_characteristics AS (
    SELECT
        encode(digest(CONCAT_WS('-', eim.vendor_name_cleaned, ct.source_column, uuid_generate_v4()::text), 'sha256'), 'hex') AS char_hash,
        eim.stg_business_entity_id,
        ct.characteristic_type,
        CASE 
            WHEN ct.transform_type = 'simple' THEN CAST(eim[ct.source_column] AS VARCHAR)
            WHEN ct.transform_type = 'yn' THEN CASE WHEN eim[ct.source_column] = 'Y' THEN 'Y' ELSE 'N' END
            WHEN ct.transform_type = 'rating' THEN CONCAT(CAST(eim[ct.source_column] AS VARCHAR), ';', CAST(current_date AS VARCHAR), ';', ct.additional_value)
            WHEN ct.transform_type = 'tier' THEN ct.additional_value
        END AS characteristic_value
    FROM entity_id_mapping eim
    CROSS JOIN char_types ct
    WHERE eim[ct.source_column] IS NOT NULL
),
-- Handle the special case of registered agents (JSON array)
registered_agents_expanded AS (
    SELECT 
        eim.stg_business_entity_id,
        json_array_elements_text(CAST(eim.registered_agents AS json)) AS agent_name
    FROM entity_id_mapping eim
    WHERE eim.registered_agents IS NOT NULL
    AND eim.registered_agents != '[]'
    AND eim.registered_agents != 'null'
),
registered_agent_characteristics AS (
    SELECT
        encode(digest(CONCAT_WS('-', rae.stg_business_entity_id, rae.agent_name, uuid_generate_v4()::text), 'sha256'), 'hex') AS char_hash,
        rae.stg_business_entity_id,
        rae.agent_name AS characteristic_type,
        'registered_agent' AS characteristic_value
    FROM registered_agents_expanded rae
),
-- Entity type characteristics for buying entities and JPMC
special_entity_characteristics AS (
    -- Buying entities
    SELECT
        encode(digest(CONCAT_WS('-', bem.buying_entity_name, 'entity_type', uuid_generate_v4()::text), 'sha256'), 'hex') AS char_hash,
        bem.stg_business_entity_id,
        'entity_type' AS characteristic_type,
        'buying_entity' AS characteristic_value
    FROM buying_entity_mappings bem
    
    UNION ALL
    
    -- JP Morgan Chase
    SELECT
        encode(digest(CONCAT_WS('-', jm.business_entity_name, 'entity_type', uuid_generate_v4()::text), 'sha256'), 'hex') AS char_hash,
        jm.stg_business_entity_id,
        'entity_type' AS characteristic_type,
        'financial_institution' AS characteristic_value
    FROM jpmc_mapping jm
),
-- Combine all characteristics
all_characteristics AS (
    SELECT * FROM vendor_characteristics
    UNION ALL
    SELECT * FROM registered_agent_characteristics
    UNION ALL
    SELECT * FROM special_entity_characteristics
)
-- Final SELECT with format for UUID-like characteristic ID
SELECT
    substring(char_hash, 1, 8) || '-' ||
    substring(char_hash, 9, 4) || '-' ||
    substring(char_hash, 13, 4) || '-' ||
    substring(char_hash, 17, 4) || '-' ||
    substring(char_hash, 21, 12) AS characteristics_id,
    stg_business_entity_id,
    characteristic_type,
    characteristic_value,
    CAST('Y' AS BOOLEAN) AS is_active,
    CAST(NULL AS VARCHAR) AS last_updated_by,
    CAST(NULL AS TIMESTAMP) AS last_updated_date,
    CAST('supplier_directory' AS VARCHAR) AS created_by,
    CAST(current_timestamp AS TIMESTAMP) AS created_date,
    CAST(NULL AS VARCHAR) AS business_validation_reason
FROM all_characteristics;
