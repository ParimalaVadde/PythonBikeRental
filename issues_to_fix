"stg_business_entity_id","business_entity_contact_id","stg_related_business_entity_id","related_business_entity_contact_id","business_entity_role","related_business_entity_role","client_vendor_id","client_vendor_site_id","client_ecid","supplier_ecid","is_active","business_entity_relationship_id"
"6907859a-25a0-38dd-4ede-5f79fecc16e1","03b2f645-ffb1-265f-e15c-400972fcf5c3","bb47d9f7-c631-a592-a734-8221082535bf","","supplier","buyer","17217","","538669316","344352238","true","921f286d-144b-6ccf-8cab-5d2cc394f7be"
"4dac8aef-e73b-32be-d1af-29a095d2774f","8776f2fa-298f-b8a9-1c71-d346861b3495","bb47d9f7-c631-a592-a734-8221082535bf","","supplier","buyer","32184","","538669316","632475079","true","4bf882e5-aa03-5f0f-dd7b-9ec61f18f5b3"
"bc6cc4b0-244e-5d6b-e907-e30b61ac0c06","b7586821-8c2a-6139-87db-228edbd03d2e","bb47d9f7-c631-a592-a734-8221082535bf","","supplier","buyer","35356","","538669316","","true","20e7a07d-a672-48fb-cab4-81583d94acdf"
"62ebe96b-5f4d-c331-394f-fc0b1f011e1c","52d58a5b-63f2-15ec-14a8-e37e7e96e20d","bb47d9f7-c631-a592-a734-8221082535bf","","supplier","buyer","99","","538669316","","true","b4075826-3d9f-9f52-a93f-3b9b98953cb8"
"55047de8-7edc-c7ea-16d4-b254183b0162","045d61a9-7d18-13e0-0204-a96d0cd4b691","bb47d9f7-c631-a592-a734-8221082535bf","","supplier","buyer","38891","","538669316","","true","37d07920-3f32-fccb-0c7b-d937963266ab"
"4dac8aef-e73b-32be-d1af-29a095d2774f","6231d5a4-3856-cda7-8a90-fcc230aff15b","bb47d9f7-c631-a592-a734-8221082535bf","","supplier","buyer","32184","","538669316","632475079","true","34f2c0b6-be8a-47a5-6cdf-55c1b63768b6"



# Select and rename columns from `transformed_relationship`
transformed_rel_identifiers = transformed_relationship.select(
    col("stg_business_entity_id"),
    col("business_entity_relationship_id"),
    col("client_vendor_id"),
    col("client_vendor_site_id"),
    #col("client_ecid"),
    col("supplier_ecid")
)

transformed_df_iden1 = (transformed_df.select("stg_payor_business_entity_id","client_ecid")
                    .distinct()
                      )
					  
transformed_df_iden = here i need to select business_entity_relationship_id from transformed_rel_identifiers where stg_business_entity_id of transformed_rel_identifiers  == stg_payor_business_entity_id of transformed_df_iden1

final transformed_df_iden should have business_entity_relationship_id,client_ecid


************************************************************

# Select and rename columns from `transformed_relationship`
transformed_rel_identifiers = transformed_relationship.select(
    col("stg_business_entity_id"),
    col("business_entity_relationship_id"),
    col("client_vendor_id"),
    col("client_vendor_site_id"),
    #col("client_ecid"),
    col("supplier_ecid")
)

transformed_df_iden1 = (transformed_df.select("stg_payor_business_entity_id","client_ecid")
                    .distinct()
                      )

# Join to get business_entity_relationship_id where stg_business_entity_id matches stg_payor_business_entity_id
transformed_df_iden = transformed_df_iden1.join(
    transformed_rel_identifiers.select("stg_business_entity_id", "business_entity_relationship_id"),
    col("stg_payor_business_entity_id") == col("stg_business_entity_id"),
    how="inner"
).select(
    col("business_entity_relationship_id"),
    col("client_ecid")
)



*******************************************************************************************************

business_entity_role	related_business_entity_role
supplier	buyer
client	firm


in below df need to filter out when business_entity_role ='client' and related_business_entity_role = 'firm' then we shouldn't consider , then in final selection it should have only
col("stg_business_entity_id"),
    col("business_entity_relationship_id"),
    col("client_vendor_id"),
    col("client_vendor_site_id"),
    #col("client_ecid"),
    col("supplier_ecid")

# Select and rename columns from `transformed_relationship`
transformed_rel_identifiers = transformed_relationship.select(
    col("stg_business_entity_id"),
    col("business_entity_relationship_id"),
    col("client_vendor_id"),
    col("client_vendor_site_id"),
    #col("client_ecid"),
    col("supplier_ecid"),
	col("business_entity_role"),
	col("related_business_entity_role")
)

************************************************************

# Select and rename columns from `transformed_relationship`
transformed_rel_identifiers = (transformed_relationship
    .select(
        col("stg_business_entity_id"),
        col("business_entity_relationship_id"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        #col("client_ecid"),
        col("supplier_ecid"),
        col("business_entity_role"),
        col("related_business_entity_role")
    )
    .filter(
        ~((col("business_entity_role") == "client") & 
          (col("related_business_entity_role") == "firm"))
    )
    .select(
        col("stg_business_entity_id"),
        col("business_entity_relationship_id"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        #col("client_ecid"),
        col("supplier_ecid")
    )
)


*************************************************************

Error Category: INVALID_ARGUMENT_ERROR; Failed Line Number: 999; AttributeError: 'tuple' object has no attribute '_jdf'

def relationship(transformed_business_entity,ss, transformed_df,compute_uuid_udf):
    
    # Process vendor contacts - ONLY if vendor_contact_name is not null
    vendor_contacts_raw = transformed_df.select(*ss.vendor_contact).distinct()
    vendor_contacts_filtered = vendor_contacts_raw.filter(col("vendor_contact_name").isNotNull())
    
    
    vendor_contacts_final = vendor_contacts_filtered.select(
    	col("stg_business_entity_id"),
    	col("vendor_contact_name").alias("contact_name"),
    	lit(None).cast("string").alias("contact_title")
    )
    
    
    # Only keep contacts that actually have contact names
    transformed_contacts = vendor_contacts_final.filter(col("contact_name").isNotNull())
    
    transformed_contacts = transformed_contacts.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
    )
    
    # Generate UUIDs only for valid contacts
    if transformed_contacts.count() > 0:
        transformed_contacts = transformed_contacts.withColumn(
            "business_entity_contact_id",
            compute_uuid_udf(struct(*transformed_contacts.columns))
        )
    
    # # Get vendor contact names from transformed_df
    # vendor_names_df = transformed_df.select(
    #     col("stg_business_entity_id"),
    #     col("vendor_contact_name").alias("contact_name")
    # ).distinct()

    # Joining this with transformed_contacts to get the accurate business_entity_contact_id
    preferred_contacts = transformed_contacts.select("stg_business_entity_id", "contact_name", "business_entity_contact_id"),
        
    
    # Print column names for debugging
    print("transformed_business_entity columns:", transformed_business_entity.columns)
    print("transformed_df columns:", transformed_df.columns)

    # Create a mapping from client_name to stg_business_entity_id using business_entity_details
    client_mapping = transformed_business_entity.select(
        col("business_entity_name").alias("client_name"),
        col("stg_business_entity_id").alias("client_stg_business_entity_id")
    )


*********************************************************************************************************************************************************************************

business_entity_contact_id
SELECT * FROM sds_staging.business_entity_relationships



SELECT * FROM sds_staging.business_entity_contacts
business_entity_contact_id

**************************************************************************************************************************

SELECT r.business_entity_contact_id
FROM sds_staging.business_entity_relationships r
LEFT JOIN sds_staging.business_entity_contacts c
    ON r.business_entity_contact_id = c.business_entity_contact_id
WHERE c.business_entity_contact_id IS NULL;



***************************************************************************************************************************

this is the df

stg_business_entity_id	business_entity_contact_id	stg_related_business_entity_id	related_business_entity_contact_id	business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid
496cf9d8-332e-1ab7-1ad3-d8f599690753	e3ce5eca-bfc4-38b4-a92a-3b6ebe36a241	bb47d9f7-c631-a592-a734-8221082535bf		supplier	buyer	32510		538669316	
902f5ee2-7aee-225d-976c-00e7542266b2	fd22cd31-bd47-35e3-500a-075bf5617dbf	bb47d9f7-c631-a592-a734-8221082535bf		supplier	buyer	43338		538669316	


here i want to derive another df from above df in pyspark

if stg_business_entity_id,stg_related_business_entity_id,business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid are eactly same


i want all columns in above df
i.e
stg_business_entity_id	business_entity_contact_id	stg_related_business_entity_id	related_business_entity_contact_id	business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid

*****************************************************************************************************************************************************************************************


this is the df

stg_business_entity_id	business_entity_contact_id	stg_related_business_entity_id	related_business_entity_contact_id	business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid
496cf9d8-332e-1ab7-1ad3-d8f599690753	e3ce5eca-bfc4-38b4-a92a-3b6ebe36a241	bb47d9f7-c631-a592-a734-8221082535bf		supplier	buyer	32510		538669316	
902f5ee2-7aee-225d-976c-00e7542266b2	fd22cd31-bd47-35e3-500a-075bf5617dbf	bb47d9f7-c631-a592-a734-8221082535bf		supplier	buyer	43338		538669316	


here i want to derive another df from above df in pyspark

if stg_business_entity_id,stg_related_business_entity_id,business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid are eactly same


i want all columns in above df
i.e
stg_business_entity_id	business_entity_contact_id	stg_related_business_entity_id	related_business_entity_contact_id	business_entity_role	related_business_entity_role	client_vendor_id	client_vendor_site_id	client_ecid	supplier_ecid
