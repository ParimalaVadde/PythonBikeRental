transformed_transaction_stability = transformed_json_df.select(*ss.transaction_stability).withColumnRenamed(
        "card_transactions_stability__end_date", "end_date"
    )
    
    #Remove duplicates
    transformed_transaction_stability = transformed_transaction_stability.dropDuplicates()
    
    #Rename "card_revenue__end_date" â†’ "end_date"
    transaction_value_columns = ["end_date" if col == "card_transactions_stability__end_date" else col for col in expected_transaction_columns]
    
    #Build condition: At least one of these columns must be non-null
    non_null_condition = None
    for col_name in transaction_value_columns:
        cond = col(col_name).isNotNull()
        non_null_condition = cond if non_null_condition is None else (non_null_condition | cond)
    
    #Filter out rows where all these revenue columns are NULL
    transformed_transaction_stability = transformed_transaction_stability.filter(non_null_condition)

    transformed_transaction_stability = transformed_transaction_stability.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
    )

    transformed_transaction_stability = transformed_transaction_stability.withColumn(
        "card_transactions_stability_id",
        compute_uuid_udf(struct(*transformed_transaction_stability.columns))
    ).dropDuplicates()
