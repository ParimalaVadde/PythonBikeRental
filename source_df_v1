flattened_dfs = {}
    
    # Loop through JSON_FIELD_CONFIGS for struct & array_double_explode fields
    for col_name, config in ss.JSON_FIELD_CONFIGS.items():
        df_flat = utl.flatten_json_column_improved(transformed_df, col_name, config, base_columns=[ss.base_col])
        if df_flat is not None and df_flat.count() > 0:
            flattened_dfs[col_name] = df_flat
    
    # Handle registered_agents separately (simple array of strings)
    reg_agents_df = (
        transformed_df
        .filter(~utl.is_empty_or_null("registered_agents"))
        .withColumn("registered_agents_json", regexp_replace(col("registered_agents"), "'", "\""))
        .withColumn("registered_agents", from_json(col("registered_agents_json"), ArrayType(StringType())))
        .withColumn(
            "registered_agents",
            when(size(col("registered_agents")) > 0, concat_ws(";", col("registered_agents"))).otherwise(lit(None))
        )
        .select(ss.base_col, "registered_agents")
    )
    
    if reg_agents_df.count() > 0:
        flattened_dfs["registered_agents"] = reg_agents_df
    
    # Combine all results
    transformed_json_df = utl.combine_flattened_results(transformed_df.select(ss.base_col).distinct(), flattened_dfs)
