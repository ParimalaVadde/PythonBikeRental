# Transform `transformed_transaction_stability`

expected_transaction_columns = [col for col in ss.transaction_stability if col != "stg_business_entity_id"]

# Step 1: Build complete select expression in ONE operation
existing_columns = set(transformed_json_df.columns)
select_expressions = []
final_column_names = []  # Track the final column names after renaming

for col_name in ss.transaction_stability:
    if col_name in existing_columns:
        # Rename during select to avoid separate withColumnRenamed operation
        if col_name == "card_transactions_stability__end_date":
            select_expressions.append(col(col_name).alias("end_date"))
            final_column_names.append("end_date")
        else:
            select_expressions.append(col(col_name))
            final_column_names.append(col_name)
    else:
        print(f"Adding missing column: {col_name}")
        dtype = (
            "date" if "date" in col_name
            else "double" if "amount" in col_name  
            else "string"
        )
        # Handle the rename case for missing columns too
        alias_name = "end_date" if col_name == "card_transactions_stability__end_date" else col_name
        select_expressions.append(lit(None).cast(dtype).alias(alias_name))
        final_column_names.append(alias_name)

# Step 2: First apply the select transformation
temp_df = transformed_json_df.select(*select_expressions)

# Step 3: Build non-null condition using the RENAMED column names
# Get all value columns (excluding stg_business_entity_id) with their final names
transaction_value_columns = [name for name in final_column_names if name != "stg_business_entity_id"]

# Build the non-null condition using the actual column names in the DataFrame
non_null_condition = coalesce(*[col(c) for c in transaction_value_columns]).isNotNull()

# Step 4: Apply filter and other transformations
transformed_transaction_stability = (temp_df
                                   .filter(non_null_condition)   # Now using correct column names
                                   .withColumn("is_active", lit(True))  # Add is_active column
                                   .distinct())  # Remove duplicates

# Step 5: Add the UUID column
transformed_transaction_stability = transformed_transaction_stability.withColumn(
    "card_transactions_stability_id",
    compute_uuid_udf(struct(*transformed_transaction_stability.columns))
).dropDuplicates()
