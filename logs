Introduction
OS Command Injection vulnerabilities arise when an application executes OS commands based on unvalidated user-supplied input data to perform a specific task.

The Flashpoint application provides the functionality to resize photos using ImageMagick's convert tool.

Open the resizer.py file and review the resize method. The OS command is constructed by concatenating input parameters directly, which may expose the application to command injection vulnerabilities. An attacker could exploit this by inserting malicious input, such as ; rm -rf /, to execute arbitrary commands on the server.

Given these risks, let's explore how to protect the application when there is a need to use user input parameters to execute an OS command.

Steps
The resize method directly concatenates the user-supplied inputs filepath, width, and height with the convert command, which is then executed in a shell context using subprocess.run with shell=True. This setup allows an attacker to inject malicious commands by including shell metacharacters or additional commands in the inputs.

Task 1
Modify the subprocess.run call to ensure the command is executed directly by the operating system without invoking an intermediary shell.

This can be achieved by either omitting the shell parameter to use its default value or by explicitly setting it to False.

Need help? Show task
Task 2
Instead of using string concatenation to build the command for subprocess.run, split the command and its input parameters into a list.

The first element in the list is the command to execute (convert).
Each subsequent element represents a separate argument, similar to how they are separated by spaces in a shell command.
Need help? Show task


import subprocess


class ResizerService:
    @staticmethod
    def resize(filepath: str, width: int, height: int):
        command = f"convert {filepath} -resize {width}x{height} {filepath}"
        subprocess.run(command, shell=True)
