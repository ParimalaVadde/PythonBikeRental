Fix the vulnerability
Find and select the solution that fixes the vulnerability listed below. Each solution may take a different approach to address the problem, but only one solution is correct.

Vulnerability Category
Insecure Cryptography - Weak Algorithm Use


Code blocks
auth.py:22-24
auth.py:51-52
config.py:26-26

1)

class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()


 def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password)

        new_user = {
            'username': self.data.get('username'),
            'password': encoded_password,
            'email': self.data.get('email'),
            'date_joined': datetime.utcnow().isoformat()
        }


PASSWORD_HASHER = 'UnsaltedMD5PasswordHasher'


***



class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()
		
		
		
def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password, self.salt.decode())



PASSWORD_HASHER = 'BCryptSHA256PasswordHasher'




2)

class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()

 def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password)
			
PASSWORD_HASHER = 'UnsaltedMD5PasswordHasher'


****
class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()

    def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password, self.salt.decode())



PASSWORD_HASHER = 'Argon2PasswordHasher'


3)

class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()
		
def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password)	

PASSWORD_HASHER = 'UnsaltedMD5PasswordHasher'			
****************


class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()

def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password, self.salt.decode())
			
			
PASSWORD_HASHER = 'Argon2PasswordHasher'


4)
class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()

 def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password)

PASSWORD_HASHER = 'UnsaltedMD5PasswordHasher'
****


class Register:
    """User Registration"""

    def __init__(self, data, *args, **kwargs):
        self.data = data
        self.password_validator = PasswordValidator()
        self.username_validator = UsernameValidator()
        self.min_validator = MinimumLengthValidator()
        # load password hasher class
        hasher = getattr(importlib.import_module('hashers'), PASSWORD_HASHER)
        self.password_hasher = hasher()
        self.salt = secrets.token_hex(32).encode()
		
		
   def create(self):
        # validate
        self.fields_validation()
        # password validation
        password = self.data.get('password1')

        encoded_password = self.password_hasher.encode(
            password)
			
			
PASSWORD_HASHER = 'PlainTextPassword'
