# Flatten the JSON columns
transformed_json_df = transformed_df.select(*ss.jsoncol)

# Updated flattening logic
for column, schema in [
    ("card_revenue", ss.card_revenue_schema),
    ("card_transactions_stability", ss.card_transactions_stability_schema),
    ("industries", ss.industries_schema),
    ("technologies", ss.technologies_schema),
]:
    transformed_json_df = utl.flatten_nested_json_column(transformed_json_df, column, schema)
    
# Use the fixed CSV writing function
write_single_csv_to_s3_fixed(
    transformed_json_df,
    s3_bucket="app-id-111597-dep-id-114116-uu-id-9x0jt94siuto",
    s3_key="pfd_scripts/pfd_staging_pvr_test/transformed_json_df_new.csv",
    temp_path="s3://app-id-111597-dep-id-114116-uu-id-9x0jt94siuto/upsert/pfd_staging/_tmp"
)

# Special handling for associated_people due to nested arrays
transformed_json_df = utl.flatten_associated_people_with_titles(transformed_json_df, "associated_people")



# First, convert Python string representation to JSON format
transformed_json_df = transformed_json_df.withColumn(
    "registered_agents_json",
    regexp_replace(col("registered_agents"), "'", "\"")
)

# Convert JSON string to actual array
transformed_json_df = transformed_json_df.withColumn(
    "registered_agents",
    when(
        (col("registered_agents_json").isNotNull()) & 
        (col("registered_agents_json") != "[]") & 
        (col("registered_agents_json") != ""),
        from_json(col("registered_agents_json"), ArrayType(StringType()))
    ).otherwise(lit(None))
)

# Convert array to semicolon-separated string
transformed_json_df = transformed_json_df.withColumn(
    "registered_agents",
    when(
        (col("registered_agents").isNotNull()) & (size(col("registered_agents")) > 0),
        concat_ws(";", col("registered_agents"))
    ).otherwise(lit(""))
)

# Drop the temporary column
transformed_json_df = transformed_json_df.drop("registered_agents_json")
