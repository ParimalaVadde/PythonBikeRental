# Select and rename columns from `transformed_relationship`
transformed_rel_identifiers = transformed_relationship.select(
    col("stg_business_entity_id"),
    col("business_entity_relationship_id"),
    col("client_vendor_id"),
    col("client_vendor_site_id"),
    col("client_ecid"),
    col("supplier_ecid"),
    col("associated_tax_ids")
)

# List of columns to melt for `transformed_rel_identifiers`
transformed_rel_identifiers_columns = ["client_vendor_id", "client_vendor_site_id", "client_ecid","supplier_ecid","associated_tax_ids"]

# Melt `transformed_rel_identifiers` using the `melt_dataframe` function
melted_rel_identifiers = utl.melt_dataframe(
    transformed_rel_identifiers,
    id_column="business_entity_relationship_id",
    columns_to_melt=transformed_rel_identifiers_columns,
    melted_column_names=("identifier_type", "identifier_value")
)

# Filter out null values early
melted_rel_identifiers = melted_rel_identifiers.filter(
    col("identifier_value").isNotNull() & (col("identifier_value") != "")
)

# Join back with relationship data to get stg_business_entity_id
transformed_rel_identifiers = melted_rel_identifiers.join(
    transformed_relationship.select("business_entity_relationship_id", "stg_business_entity_id"),
    on="business_entity_relationship_id",
    how="inner"
)

# Prepare relationship identifiers with source
transformed_rel_identifiers = transformed_rel_identifiers.select(
    col("identifier_type"),
    col("identifier_value"),
    col("business_entity_relationship_id").alias("related_identifier")
).withColumn("related_identifier_source", lit("relationship"))

# Select columns from `transformed_df` for `transformed_identifiers`
transformed_identifiers = transformed_df.select(*ss.identifiers)

# Melt `transformed_identifiers` using the `melt_dataframe` function
melted_business_identifiers = utl.melt_dataframe(
    transformed_identifiers,
    id_column="stg_business_entity_id",
    columns_to_melt=ss.transformed_identifiers_columns,
    melted_column_names=("identifier_type", "identifier_value")
)

# Filter out null values early
melted_business_identifiers = melted_business_identifiers.filter(
    col("identifier_value").isNotNull() & (col("identifier_value") != "")
)

# Prepare business entity identifiers with source
transformed_business_identifiers = melted_business_identifiers.select(
    col("identifier_type"),
    col("identifier_value"),
    col("stg_business_entity_id").alias("related_identifier")
).withColumn("related_identifier_source", lit("business_entity"))

# REMOVE THE ANTI-JOIN - Union both sources directly
transformed_identifiers = transformed_business_identifiers.union(transformed_rel_identifiers)

# Drop duplicates based on identifier_type, identifier_value, and related_identifier
# This ensures we don't have exact duplicates but allows same identifier for different entities
transformed_identifiers = transformed_identifiers.dropDuplicates([
    "identifier_type", "identifier_value", "related_identifier", "related_identifier_source"
])

# Update identifier_type column in transformed_identifiers
transformed_identifiers = transformed_identifiers.withColumn(
    "identifier_type",
    when(col("identifier_type") == "client_ecid", "ecid")
    .when(col("identifier_type") == "supplier_ecid", "ecid")
    .otherwise(col("identifier_type"))
)

transformed_identifiers = transformed_identifiers.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
)

transformed_identifiers = transformed_identifiers.withColumn(
    "identifier_id",
    compute_uuid_udf(struct(*transformed_identifiers.columns))
)

# Show the resulting DataFrame
print("Final transformed_identifiers count:", transformed_identifiers.count())
print("Relationship identifiers count:", transformed_rel_identifiers.count())
print("Business entity identifiers count:", transformed_business_identifiers.count())

# Show sample of each type
print("\nSample relationship identifiers:")
transformed_identifiers.filter(col("related_identifier_source") == "relationship").show(5, truncate=False)

print("\nSample business entity identifiers:")
transformed_identifiers.filter(col("related_identifier_source") == "business_entity").show(5, truncate=False)

transformed_identifiers.show(truncate=False)
