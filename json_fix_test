# Step 1: Split into json_to_flatten and json_not_flatten
json_to_flatten = []
json_not_flatten = []

for i in jsoncol:
    if i == ss.base_col:
        continue
    non_null_count = (
        transformed_df.filter((col(i).isNotNull()) & (col(i) != ""))
        .limit(1).count()
    )
    if non_null_count > 0:
        json_to_flatten.append(i)
    else:
        json_not_flatten.append(i)


# Step 2: Flatten only required JSON fields
if len(json_to_flatten) > 0:
    JSON_FIELD_CONFIGS_v1 = {k: v for k, v in JSON_FIELD_CONFIGS.items() if k in json_to_flatten}

    for col_name, config in JSON_FIELD_CONFIGS_v1.items():
        df_flat = utl.flatten_json_column_improved(transformed_df, col_name, config, base_columns=[ss.base_col])
        if df_flat is not None and df_flat.count() > 0:
            flattened_dfs[col_name] = df_flat

    # Handle registered_agents separately
    reg_agents_df = (
        transformed_df
        .filter(~utl.is_empty_or_null("registered_agents"))
        .withColumn("registered_agents_json", regexp_replace(col("registered_agents"), "'", "\""))
        .withColumn("registered_agents", from_json(col("registered_agents_json"), ArrayType(StringType())))
        .withColumn("registered_agents",
            when(size(col("registered_agents")) > 0, concat_ws(";", col("registered_agents"))).otherwise(lit(None))
        )
        .select(ss.base_col, "registered_agents")
    )
    if reg_agents_df.count() > 0:
        flattened_dfs["registered_agents"] = reg_agents_df

    transformed_json_df = utl.combine_flattened_results(transformed_df.select(ss.base_col).distinct(), flattened_dfs)


# Step 3: Handle json_not_flatten → add null columns
if len(json_not_flatten) > 0:
    for i in json_not_flatten:
        if i not in json_col_dict.keys():
            transformed_json_df = transformed_json_df.withColumn(i, lit(None))
        else:
            mapped_name = json_col_dict[i]
            required_cols = getattr(ss, mapped_name)
            for c in required_cols:
                if c != ss.base_col:
                    transformed_json_df = transformed_json_df.withColumn(c, lit(None))




*****************************************************************************************************************

# Step 1: Split into json_to_flatten and json_not_flatten
json_to_flatten = []
json_not_flatten = []

json_col = [i for i in jsoncol if i != ss.base_col]

for i in json_col:
    non_null_count = (
        transformed_df.filter((col(i).isNotNull()) & (col(i) != ""))
        .limit(1).count()
    )
    if non_null_count > 0:
        json_to_flatten.append(i)
    else:
        json_not_flatten.append(i)


# Step 2: Flatten only required JSON fields
if len(json_to_flatten) > 0:
    JSON_FIELD_CONFIGS_v1 = {k: v for k, v in JSON_FIELD_CONFIGS.items() if k in json_to_flatten}

    for col_name, config in JSON_FIELD_CONFIGS_v1.items():
        df_flat = utl.flatten_json_column_improved(transformed_df, col_name, config, base_columns=[ss.base_col])
        if df_flat is not None and df_flat.count() > 0:
            flattened_dfs[col_name] = df_flat

    # Handle registered_agents separately
    reg_agents_df = (
        transformed_df
        .filter(~utl.is_empty_or_null("registered_agents"))
        .withColumn("registered_agents_json", regexp_replace(col("registered_agents"), "'", "\""))
        .withColumn("registered_agents", from_json(col("registered_agents_json"), ArrayType(StringType())))
        .withColumn("registered_agents",
            when(size(col("registered_agents")) > 0, concat_ws(";", col("registered_agents"))).otherwise(lit(None))
        )
        .select(ss.base_col, "registered_agents")
    )
    if reg_agents_df.count() > 0:
        flattened_dfs["registered_agents"] = reg_agents_df

    transformed_json_df = utl.combine_flattened_results(transformed_df.select(ss.base_col).distinct(), flattened_dfs)


# Step 3: Handle json_not_flatten → add null columns
if len(json_not_flatten) > 0:
    for i in json_not_flatten:
        if i not in json_col_dict.keys():
            transformed_json_df = transformed_json_df.withColumn(i, lit(None))
        else:
            mapped_name = json_col_dict[i]        # e.g. "contacts"
            required_cols = getattr(ss, mapped_name)  # e.g. ss.contacts
            for c in required_cols:
                if c != ss.base_col:
                    transformed_json_df = transformed_json_df.withColumn(c, lit(None))


(*******************************************************************************************************************

# If no JSON fields were flattened, at least keep base_col
if transformed_json_df is None:
    transformed_json_df = transformed_df.select(ss.base_col).distinct()


********************************************

Error Category: INVALID_ARGUMENT_ERROR; Failed Line Number: 378; NameError: name 'transformed_json_df' is not defined
