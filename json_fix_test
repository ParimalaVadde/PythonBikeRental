def relationship(transformed_business_entity,ss, transformed_df,compute_uuid_udf):
    
    # Process vendor contacts - ONLY if vendor_contact_name is not null transformed_contacts.count() is not equal to transformed_contacts.count() > 0 then it wont create business_entity_contact_id column and i m getting error 
    Error Category: QUERY_ERROR; Failed Line Number: 1042; Spark Error Class: MISSING_COLUMN; AnalysisException: Column 'business_entity_contact_id' does not exist. Did you mean one of the following? [stg_business_entity_id, contact_name, contact_title, is_active];
    but it has to create business_entity_contact_id with null values to handle this scenario
    vendor_contacts_raw = transformed_df.select(*ss.vendor_contact).distinct()
    vendor_contacts_filtered = vendor_contacts_raw.filter(col("vendor_contact_name").isNotNull())
    
    suppose here if vendor_contact_name is completely null from input file then 
    vendor_contacts_final = vendor_contacts_filtered.select(
    	col("stg_business_entity_id"),
    	col("vendor_contact_name").alias("contact_name"),
    	lit(None).cast("string").alias("contact_title")
    )
    
    
    # Only keep contacts that actually have contact names
    transformed_contacts = vendor_contacts_final.filter(col("contact_name").isNotNull())
    
    transformed_contacts = transformed_contacts.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
    )
    
    # Generate UUIDs only for valid contacts
    if transformed_contacts.count() > 0:
        transformed_contacts = transformed_contacts.withColumn(
            "business_entity_contact_id",
            compute_uuid_udf(struct(*transformed_contacts.columns))
        )
    
    # # Get vendor contact names from transformed_df
    # vendor_names_df = transformed_df.select(
    #     col("stg_business_entity_id"),
    #     col("vendor_contact_name").alias("contact_name")
    # ).distinct()

    # Joining this with transformed_contacts to get the accurate business_entity_contact_id
    preferred_contacts = transformed_contacts.select("stg_business_entity_id", "contact_name", "business_entity_contact_id")
        
    
    # Print column names for debugging
    print("transformed_business_entity columns:", transformed_business_entity.columns)
    print("transformed_df columns:", transformed_df.columns)

    # Create a mapping from client_name to stg_business_entity_id using business_entity_details
    client_mapping = transformed_business_entity.select(
        col("business_entity_name").alias("client_name"),
        col("stg_business_entity_id").alias("client_stg_business_entity_id")
    )
    

    # Initialize list to collect all relationship DataFrames
    relationship_dfs = []
    
    # 1. Create client -> firm relationships first (for distinct clients)
    # Filter out empty/null stg_business_entity_id and join with transformed_df to get required columns
    distinct_clients = transformed_df.select(
        "client_name", 
        "stg_business_entity_id",
        "client_vendor_id",
        "client_vendor_site_id", 
        "client_ecid",
        "supplier_ecid"
    ).filter(
        col("client_name").isNotNull() & 
        (col("client_name") != "") &
        col("stg_business_entity_id").isNotNull() & 
        (col("stg_business_entity_id") != "") &
        (col("stg_business_entity_id") != "null") &
        (col("stg_business_entity_id") != "none")
    ).distinct()
    
    client_firm_df = distinct_clients.join(
        client_mapping,
        on="client_name",
        how="inner"
    ).select(
        col("client_stg_business_entity_id").alias("stg_business_entity_id"),
        lit(None).alias("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("client").alias("business_entity_role"),
        lit("firm").alias("related_business_entity_role"),
        lit(None).alias("client_vendor_id"),
        lit(None).alias("client_vendor_site_id"),
        lit(None).alias("client_ecid"),
        lit(None).alias("supplier_ecid")
    )
    
    relationship_dfs.append(client_firm_df)
    
    # 2. Create supplier -> client relationships
    # Filter out empty/null stg_business_entity_id
    # Alias the dataframes before join
    df = transformed_df.alias("df")
    pc = preferred_contacts.alias("pc")
    
    supplier_client_base = df.filter(
        col("df.stg_business_entity_id").isNotNull() & 
        (col("df.stg_business_entity_id") != "") & 
        (col("df.stg_business_entity_id") != "null") & 
        (col("df.stg_business_entity_id") != "none")
    ).join(
        client_mapping.alias("cm"),
        df["client_name"] == col("cm.client_name"),
        how="inner"
    ).join(
        pc,
        (df["stg_business_entity_id"] == pc["stg_business_entity_id"]) &
        (df["vendor_contact_name"] == pc["contact_name"]),
        how="left"
    )
    
    supplier_client_df = supplier_client_base.select(
        df["stg_business_entity_id"],
        pc["business_entity_contact_id"],
        col("cm.client_stg_business_entity_id").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("supplier").alias("business_entity_role"),
        lit("buyer").alias("related_business_entity_role"),
        df["client_vendor_id"],
        df["client_vendor_site_id"],
        df["client_ecid"],
        df["supplier_ecid"]
    )
    
    relationship_dfs.append(supplier_client_df)
    
    # 3. Create supplier -> firm relationships (only when supplier_ecid is not null/empty)
    supplier_firm_base = transformed_df.filter(
        col("supplier_ecid").isNotNull() & 
        (col("supplier_ecid") != "") & 
        (col("supplier_ecid") != "NULL") &
        col("stg_business_entity_id").isNotNull() & 
        (col("stg_business_entity_id") != "") &
        (col("stg_business_entity_id") != "null") &
        (col("stg_business_entity_id") != "none")
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left"
    )
    
    supplier_firm_df = supplier_firm_base.select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("client").alias("business_entity_role"),
        lit("firm").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("supplier_ecid")
    )

    relationship_dfs.append(supplier_firm_df)
    
    # Union all relationship DataFrames
    union_df = relationship_dfs[0]
    for df in relationship_dfs[1:]:
        union_df = union_df.union(df)
    
    # Drop duplicates
    union_df = union_df.dropDuplicates()


    return union_df


 # Step 5: Add business_entity_contact_id (always exists)
    if transformed_contacts.count() > 0:
        # Generate UUIDs for valid contacts
        transformed_contacts = transformed_contacts.withColumn(
            "business_entity_contact_id",
            compute_uuid_udf(struct(*transformed_contacts.columns))
        )
    else:
        # Ensure schema compatibility: add empty columns
        transformed_contacts = vendor_contacts_raw.select(
            col("stg_business_entity_id"),
            lit(None).cast("string").alias("contact_name"),
            lit(None).cast("string").alias("contact_title"),
            lit(True).cast("boolean").alias("is_active"),
            lit(None).cast("string").alias("business_entity_contact_id")
        ).limit(0)   # makes it empty but with schema






Got it üëç You mean you want **column-level explanations** also, like *‚Äúrevenue\_usd‚Äù means total reported revenue in USD, year\_incorporated means the year company started operations‚Äù*, etc.

I‚Äôll expand table-by-table with **important columns + business meaning** (you can pick whichever columns are most relevant for KT).

---

## **1. business\_entity**

| Column                        | Meaning                                                                    |
| ----------------------------- | -------------------------------------------------------------------------- |
| **stg\_business\_entity\_id** | Unique UUID assigned to each supplier (acts as foreign key in all tables). |
| **supplier\_name**            | Legal or registered name of supplier.                                      |
| **status**                    | Current status (Active / Inactive / Suspended).                            |
| **parent\_flag**              | Indicates if supplier is a parent entity in hierarchy.                     |

---

## **2. business\_entity\_details**

| Column                     | Meaning                                          |
| -------------------------- | ------------------------------------------------ |
| **business\_structure**    | Type of company (Private Ltd, LLC, Partnership). |
| **year\_incorporated**     | The year the supplier was incorporated.          |
| **reported\_revenue\_usd** | Total revenue reported by supplier in USD.       |
| **market\_type**           | B2B, B2C, Govt etc.                              |

*Example:* `reported_revenue_usd = 45,000,000 ‚Üí Supplier reported $45M revenue last year.`

---

## **3. business\_entity\_contacts**

| Column                  | Meaning                                          |
| ----------------------- | ------------------------------------------------ |
| **contact\_name**       | Full name of contact person.                     |
| **designation**         | Role/position (e.g., Procurement Manager).       |
| **is\_decision\_maker** | Yes/No ‚Äì if the contact is a key decision maker. |
| **email\_id**           | Contact email address.                           |

---

## **4. business\_entity\_card\_association**

| Column                             | Meaning                                                                    |
| ---------------------------------- | -------------------------------------------------------------------------- |
| **card\_network**                  | Payment network like VISA, MasterCard, Amex.                               |
| **merchant\_category\_code (MCC)** | Industry code used in card transactions (e.g., 5732 = Electronics Stores). |
| **match\_confidence**              | Confidence % of supplier-to-network mapping.                               |
| **line\_item\_data\_available**    | Whether detailed line-item card data is available (Yes/No).                |

---

## **5. business\_entity\_card\_revenues**

| Column                           | Meaning                                              |
| -------------------------------- | ---------------------------------------------------- |
| **year**                         | Year of revenue.                                     |
| **total\_card\_revenue\_usd**    | Total supplier revenue via card transactions in USD. |
| **quarterly\_revenue\_q1\_usd**  | Revenue in Q1 via card transactions.                 |
| **quarterly\_revenue\_q2\_usd‚Ä¶** | Same for Q2, Q3, Q4.                                 |

*Example:* `total_card_revenue_usd = 3,200,000 ‚Üí Supplier earned $3.2M from card transactions in 2024.`

---

## **6. business\_entity\_card\_transactions\_stability**

| Column                         | Meaning                                                                                         |
| ------------------------------ | ----------------------------------------------------------------------------------------------- |
| **last\_12m\_activity\_ratio** | Ratio of active months to total 12 months (e.g., 0.95 = transactions happened in 11/12 months). |
| **last\_3m\_activity\_ratio**  | Same ratio for last 3 months.                                                                   |
| **last\_1m\_activity\_ratio**  | Same ratio for last 1 month.                                                                    |

---

## **7. business\_entity\_characteristics**

| Column                  | Meaning                                             |
| ----------------------- | --------------------------------------------------- |
| **acceptance\_tier**    | Business tier (e.g., Tier 1 = high revenue).        |
| **kpi\_flag**           | Flags if supplier is critical/high-priority.        |
| **campaign\_indicator** | Whether supplier is eligible for campaign/outreach. |

---

## **8. business\_entity\_industry\_classification**

| Column                      | Meaning                                   |
| --------------------------- | ----------------------------------------- |
| **industry\_sector**        | Broad industry (e.g., IT, Manufacturing). |
| **industry\_group**         | Sub-industry (e.g., Software Services).   |
| **naics\_code / sic\_code** | Standard industry classification codes.   |
| **industry\_description**   | Textual description of supplier‚Äôs sector. |

---

## **9. business\_entity\_receivables\_attribute**

| Column                    | Meaning                                                             |
| ------------------------- | ------------------------------------------------------------------- |
| **dso\_days**             | Days Sales Outstanding ‚Äì average time taken to collect receivables. |
| **credit\_rating**        | External/internal credit risk rating (A, B, C, etc.).               |
| **receivables\_turnover** | Ratio of revenue vs receivables (higher = faster collections).      |

---

## **10. business\_entity\_spend\_analysis**

| Column                   | Meaning                                    |
| ------------------------ | ------------------------------------------ |
| **total\_spend\_usd**    | Total spend with supplier in USD.          |
| **number\_of\_invoices** | Count of invoices processed.               |
| **spend\_category**      | Category of spend (IT, Travel, Marketing). |

---

## **11. restrictions**

| Column                     | Meaning                                                 |
| -------------------------- | ------------------------------------------------------- |
| **do\_not\_campaign**      | Yes/No ‚Äì whether supplier can be included in campaigns. |
| **government\_restricted** | Yes/No ‚Äì supplier is govt restricted entity.            |
| **financial\_institution** | Yes/No ‚Äì supplier is a bank or FI.                      |

---

## **12. electronic\_address**

| Column             | Meaning                    |
| ------------------ | -------------------------- |
| **email\_address** | Primary email of supplier. |
| **website\_url**   | Supplier‚Äôs website.        |

---

## **13. telecommunication\_address**

| Column            | Meaning               |
| ----------------- | --------------------- |
| **phone\_number** | Contact phone number. |
| **fax\_number**   | Fax if available.     |

---

## **14. physical\_address**

| Column                          | Meaning           |
| ------------------------------- | ----------------- |
| **address\_line1 / line2**      | Street details.   |
| **city / state / postal\_code** | Location details. |
| **country**                     | Country name.     |

---

## **15. business\_entity\_relationships**

| Column                        | Meaning                   |
| ----------------------------- | ------------------------- |
| **parent\_company**           | Immediate parent company. |
| **ultimate\_parent\_company** | Top holding company.      |
| **alternate\_name**           | Trade names/aliases.      |

---

## **16. business\_entity\_identifiers**

| Column                 | Meaning                                                  |
| ---------------------- | -------------------------------------------------------- |
| **duns\_number**       | Dun & Bradstreet unique identifier.                      |
| **tax\_id**            | Supplier‚Äôs tax registration number (e.g., PAN in India). |
| **enigma\_id**         | External supplier database ID.                           |
| **google\_places\_id** | Google business ID.                                      |

---

üëâ In KT, you can explain like this:

* **Start with entity identity (business\_entity, identifiers, addresses).**
* **Then add financial/operational aspects (revenues, receivables, spend, industry).**
* **Finally, restrictions & relationships (compliance, parent/child companies).**

---

Do you want me to prepare a **table-wise Excel sheet with column ‚Üí meaning ‚Üí example** so you can share with your team after KT?
