existing functions 

# Define a UDF to compute UUID from concatenated column values
def compute_uuid(*cols):
    try:
        # Concatenate all column values into a single string
        name = ','.join(str(col) if col is not None else '' for col in sorted(cols))
        # Generate MD5 digest
        digest = hashlib.md5(name.encode()).digest()
        # Generate UUID from the digest
        return   getstr(uuid.UUID(bytes=digest))
    except Exception as e:
        print(f"Error in compute_uuid: {e}")
        return None


		
and how it is called

# Register the UDF
compute_uuid_udf = udf(utl.compute_uuid, StringType())

# Define UDFs for computing business entity ID and buying entity ID
        
        
source_df = source_df.withColumn(
                        "stg_business_entity_id",
                        when(
                            col("sds_supplier_id").isNotNull(), col("sds_supplier_id")
                            ).otherwise(
                                compute_uuid_udf(concat_ws(",", col("vendor_name_cleaned")))
                            )
                            )
                

                    
        print("stg_business_entity_id column added.")


        source_df = source_df.withColumn(
                "stg_buying_entity",
            compute_uuid_udf(concat_ws(",", col("client_name")))
                )
                
        print("stg_buying_entity column added.")



now the issue is if all *cols are null then it shouldn't create uuid but it is creating uuid even when all cols are null.
so how to fix this 

only if we make changes in function compute_uuid(*cols) will it be fixed. how to fix it.




def compute_uuid(*cols):
    try:
        # Check if all columns are null or empty
        non_null_cols = [str(col) for col in cols if col is not None and str(col).strip() != '']
        
        # If no valid columns, return None
        if not non_null_cols:
            return None
            
        # Concatenate all non-null column values into a single string
        name = ','.join(sorted(non_null_cols))
        
        # Generate MD5 digest
        digest = hashlib.md5(name.encode()).digest()
        
        # Generate UUID from the digest
        return str(uuid.UUID(bytes=digest))
        
    except Exception as e:
        print(f"Error in compute_uuid: {e}")
        return None
