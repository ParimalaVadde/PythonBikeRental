# Transform contacts from associated_people data
people_contacts = transformed_json_df.select(*ss.contacts).distinct().withColumnRenamed(
    "associated_people__name", "contact_name"
).withColumnRenamed(
    "associated_people__title", "contact_title"
)

# Process vendor contacts - ONLY if vendor_contact_name is not null
vendor_contacts_raw = transformed_df.select(*ss.vendor_contact).distinct()
vendor_contacts_filtered = vendor_contacts_raw.filter(col("vendor_contact_name").isNotNull())

# Check if there are any non-null vendor contacts
vendor_contact_count = vendor_contacts_filtered.count()

if vendor_contact_count > 0:
    vendor_contacts_final = vendor_contacts_filtered.select(
        col("stg_business_entity_id"),
        col("vendor_contact_name").alias("contact_name"),
        lit(None).cast("string").alias("contact_title")
    )
    # Union the two dataframes
    all_contacts = people_contacts.unionByName(vendor_contacts_final)
else:
    # Use only the people contacts data
    all_contacts = people_contacts

# FIXED: Only keep contacts that actually have contact names
transformed_contacts = all_contacts.filter(col("contact_name").isNotNull())

# Generate UUIDs only for valid contacts
if transformed_contacts.count() > 0:
    transformed_contacts = transformed_contacts.withColumn(
        "business_entity_contact_id",
        compute_uuid_udf(concat_ws(",", *[col for col in transformed_contacts.columns]))
    )
    
print("=== Final transformed_contacts ===")
transformed_contacts.show()
