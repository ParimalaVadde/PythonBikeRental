def relationship(transformed_business_entity, transformed_contacts, transformed_df):
    from pyspark.sql import DataFrame
    from pyspark.sql.functions import col, lit, when, coalesce
    
    # Get vendor contact names from transformed_df
    vendor_names_df = transformed_df.select(
        col("stg_business_entity_id"),
        col("vendor_contact_name").alias("contact_name")
    ).distinct()

    # Joining this with transformed_contacts to get the accurate business_entity_contact_id
    preferred_contacts = vendor_names_df.join(
        transformed_contacts.select("stg_business_entity_id", "contact_name", "business_entity_contact_id"),
        on=["stg_business_entity_id", "contact_name"],
        how="inner"
    ).distinct()
    
    print("hi 1")
    # Print column names for debugging
    print("transformed_business_entity columns:", transformed_business_entity.columns)
    print("transformed_df columns:", transformed_df.columns)

    # Create a mapping from client_name to stg_business_entity_id using business_entity_details
    client_mapping = transformed_business_entity.select(
        col("business_entity_name").alias("client_name"),
        col("stg_business_entity_id").alias("client_stg_business_entity_id")
    )
    
    print("hi 2")

    # Initialize list to collect all relationship DataFrames
    relationship_dfs = []
    
    # 1. Create client -> firm relationships first (for distinct clients)
    distinct_clients = transformed_df.select("client_name").distinct().filter(
        col("client_name").isNotNull() & (col("client_name") != "")
    )
    
    client_firm_df = distinct_clients.join(
        client_mapping,
        on="client_name",
        how="inner"
    ).select(
        col("client_stg_business_entity_id").alias("stg_business_entity_id"),
        lit(None).alias("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("Client").alias("business_entity_role"),
        lit("Firm").alias("related_business_entity_role"),
        lit(None).alias("client_vendor_id"),
        lit(None).alias("client_vendor_site_id"),
        lit(None).alias("client_ecid"),
        lit(None).alias("supplier_ecid"),
        lit(None).alias("associated_tax_ids")
    )
    
    relationship_dfs.append(client_firm_df)
    print("hi 3")
    # 2. Create supplier -> client relationships
    # Join transformed_df with client_mapping to get client's stg_business_entity_id
    supplier_client_base = transformed_df.join(
        client_mapping,
        on="client_name",
        how="inner"
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left"
    )
    
    supplier_client_df = supplier_client_base.select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        col("client_stg_business_entity_id").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("Supplier").alias("business_entity_role"),
        lit("Client").alias("related_business_entity_role"),
        col("client_vendor_id"),
        col("client_vendor_site_id"),
        col("client_ecid"),
        col("supplier_ecid"),
        col("associated_tax_ids")
    )
    
    relationship_dfs.append(supplier_client_df)
    
    # 3. Create supplier -> firm relationships (only when supplier_ecid is not null/empty)
    supplier_firm_base = transformed_df.filter(
        col("supplier_ecid").isNotNull() & (col("supplier_ecid") != "") & (col("supplier_ecid") != "NULL")
    ).join(
        preferred_contacts,
        on="stg_business_entity_id",
        how="left"
    )
    
    supplier_firm_df = supplier_firm_base.select(
        col("stg_business_entity_id"),
        col("business_entity_contact_id"),
        lit("2d35a04a-5fdf-50d5-7750-c1c7621ddc33").alias("stg_related_business_entity_id"),
        lit(None).alias("related_business_entity_contact_id"),
        lit("Client").alias("business_entity_role"),
        lit("Firm").alias("related_business_entity_role"),
        lit(None).alias("client_vendor_id"),
        lit(None).alias("client_vendor_site_id"),
        lit(None).alias("client_ecid"),
        lit(None).alias("supplier_ecid"),
        lit(None).alias("associated_tax_ids")
    )
    print("hi 4")
    relationship_dfs.append(supplier_firm_df)
    
    # Union all relationship DataFrames
    union_df = relationship_dfs[0]
    for df in relationship_dfs[1:]:
        union_df = union_df.union(df)
    print("hi 5")
    # Drop duplicates
    union_df = union_df.dropDuplicates()

    print("hi 6")
    return union_df

# Call the `relationship` function and assign the result to `transformed_relationship`
transformed_relationship = relationship(transformed_business_entity_details, transformed_contacts, transformed_df)

transformed_relationship = transformed_relationship.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
)
print("hi 7")
transformed_relationship = transformed_relationship.withColumnRenamed("related_business_entity_id", "stg_related_business_entity_id")
