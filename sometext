transformed_business_entity_details = transformed_business_entity_details.withColumn(
        "business_entity_details_id",
        compute_uuid_udf(concat_ws(",", *[col for col in transformed_business_entity_details.columns]))
    )
	
	
source_df = source_df.withColumn(
                        "stg_business_entity_id",
                        when(
                            col("sds_supplier_id").isNotNull(), col("sds_supplier_id")
                            ).otherwise(
                                compute_uuid_udf(concat_ws(",", col("vendor_name_cleaned")))
                            )
                            )
							
							
**************************************************************************************************************************************


def compute_uuid(data: dict):
    values = []
    decimal_columns = {
        "card_transactions_stability__1m__daily_coverage_ratio",
        "card_transactions_stability__1m__weekly_coverage_ratio",
        "card_transactions_stability__1m__monthly_coverage_ratio",
        "card_transactions_stability__3m__daily_coverage_ratio",
        "card_transactions_stability__3m__weekly_coverage_ratio",
        "card_transactions_stability__3m__monthly_coverage_ratio",
        "card_transactions_stability__12m__daily_coverage_ratio",
        "card_transactions_stability__12m__weekly_coverage_ratio",
        "card_transactions_stability__12m__monthly_coverage_ratio",
        "card_revenue__1m__average_monthly_amount",
        "card_revenue__3m__average_monthly_amount",
        "card_revenue__12m__average_monthly_amount",
        "count_of_invoices",
        "count_of_payments",
        "sum_of_payments",
        "chargeback_amount",
        "chargeback_percentage",
        "actual_days_payment_outstanding",
        "payment_term_days",
        "payment_terms_discount_rate",
        "payment_terms_discount_days",
    }
    for column in sorted(data.keys()):
        val = data[column]
        if val and str(val).strip().lower() not in {"", "nan", "null", "none","nat"}:
            if column in decimal_columns:
                val = f"{val:.6f}"
            values.append(str(val))
        name = ','.join(values)
        return str(uuid.UUID(bytes=hashlib.md5(name.encode()).digest())) if name else None



*********************************************************************************************************************************************************************************************************************************
def compute_uuid(data: dict , decimal_columns):
    for column in sorted(data.keys()):
        val = data[column]
        if val and str(val).strip().lower() not in {"", "nan", "null", "none","nat"}:
            if column in decimal_columns:
                val = f"{val:.6f}"
            values.append(str(val))
        name = ','.join(values)
        return str(uuid.UUID(bytes=hashlib.md5(name.encode()).digest())) if name else None


****************************************************

source_df = source_df.withColumn(
                        "stg_business_entity_id",
                        when(
                            col("sds_supplier_id").isNotNull(), col("sds_supplier_id")
                            ).otherwise(
                                compute_uuid_udf(struct("vendor_name_cleaned"))
                            )
                            )
							
							
transformed_business_entity_details = transformed_business_entity_details.withColumn(
        "business_entity_details_id",
        compute_uuid_udf(struct(*transformed_business_entity_details.columns))
    )
