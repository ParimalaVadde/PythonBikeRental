AWS RDS Aurora for PostgreSQL
Overview and Details for provisioning an AWS RDS Aurora for PostgreSQL using EaC.

Overview
Amazon Aurora is a PostgreSQL-compatible relational database built for the cloud that combines the performance and availability of traditional enterprise databases with the simplicity and cost-effectiveness of open source databases.Amazon Aurora features a distributed, fault-tolerant, self-healing storage system that auto-scales up to 128TB per database instance. It delivers high performance and availability with up to 15 low-latency read replicas, point-in-time recovery, continuous backup to Amazon S3, and replication across three Availability Zones (AZs).

Component Name: rdsaurora
Model Component Type: RDSAuroraPostgres

Upgrading from ModulePack 0.6.x
BREAKING CHANGE: You must use a blue/green deployment to use the Aurora PostgreSQL EaC ModulePack version 0.7.x. See the change logs for details. To perform a blue/green deployment using a snapshot, follow the EaC guide

Service Integrations
This component can integrate with any of the listed AWS Services.

EKS	AWS postgresql	DB Restore
EKS	Lightswitch	db-restore
Prerequisites
This component requires an Amazon KMS key (only for creation of Aurora cluster not for byo )starting in ModulePack version 0.7.0+. See the EaC KMS Component for more details.

KMS	KMS
KMS	VPC Endpoints
Properties
Name	Description	Type	Default	Required
acceptance_test_enabled	The default value is false, if acceptance test suite needs to run and test the services through EAC platform, this flag should be enabled.	bool	false	no
add_policies_to_default_roles	This will add db connect policies to the -aurora-ro, -aurora-rw, -aurora-app-admin and -application-breakglass SAML enabled roles. If you are using the database purely from AWS, then you do not need to attach these policies as they are only used for on premise access via SAML. This will default to true.	bool	true	no
apply_immediately	To be true in case of major version upgrade, immediate upgrade of cluster and instances. Downtime required.	bool	false	no
attribution_enabled	n/a	bool	false	no
aurora_cluster_postgres_db_parameter_group_family	Family to be used with cluster level parameter group	string	n/a	yes
aurora_instance_postgres_db_parameter_group_family	Family to be used with instance level parameter group	string	n/a	yes
aurora_track_activity_query_size	value of track_activity_query_size parameter at cluster and instance level, in bytes.
Minimum value for this parameter could be 100 bytes and maximum could be 1048576 bytes for aurora engine version
13.x and greater.	number	4096	no
auto-scaling	Auto Scaling Specific Variables	bool	false	no
auto-scaling_max_capacity	Max capacity of the autoscaling group - Allowed values: 0-15	string	"0"	no
auto-scaling_min_capacity	Min capacity of the autoscaling group - Allowed values: 0-15	string	"0"	no
ca_cert_identifier	Specifies the identifier of the CA certificate for the DB instance	string	"rds-ca-rsa4096-g1"	no
centralized_backup	Centralized Backup options are: PITRBACKUP (PITR Backup only) or PITRANDSNAPBKP (PITR and SNAPSHOT Backup)	string	"PITRBACKUP"	no
centralized_backup_pitr_schedule	PITR backup schedule. the schedule can be a Cron expressions with six required fields separated by white space or a rate expression i.e. intervals e.g. rate(30 minutes)	string	"cron(00 23 ? * * *)"	no
centralized_backup_snap_schedule	SNAPSHOT backup schedule. the schedule can be a Cron expressions with six required fields separated by white space or a rate expression i.e. intervals e.g. rate(30 minutes)	string	"cron(00 23 ? * * *)"	no
centralized_snap_retention_days	SNAPSHOT Backup retention period. Available options are: 35, 70, 100 or 400.	string	"35"	no
create_bitool_user	This will create a new user called 'bitooluserro', which is for the specific use case readonly requirements for BI tools.	bool	false	no
create_dms_user	To be true in case of major version upgrade, immediate upgrade of cluster and instances. Downtime required.	bool	true	no
create_ggapgadmin_user	If you are using Oracle GoldenGate replication to migrate to Aurora PostgreSQL set this variable as true. You can set it to true again to create it later.	bool	false	no
custom_db_names	List of custom database names you want created	list(string)	[]	no
database_name	Name of database to be created. (This can NOT be changed later)	string	n/a	yes
datadog_db_performance_monitoring_enabled	This will create a DataDog user and configure the parameters to support DataDog Database Performance Monitoring. DataDog Agent configuration not included. See: https://docs.datadoghq.com/database_monitoring/ for more details.	bool	false	no
db_backup_retention_days	Backup retention period (days) 35.	number	35	no
db_instance_type	DB instance. see https://engineers.jpmchase.net/docs/databases/aws-rds-aurora-postgres/getting-started/product-information/instace-classes/rds-instance-types/ for more details. For serverless, use db.serverless	string	"db.r6g.large"	no
debug_logging	Whether the proxy includes detailed information about SQL statements in its logs.	bool	false	no
deletion_protection	The database can't be deleted when this value is set to true. The default is false, in PROD this is forced to true.	string	"false"	no
enable_global_write_forwarding	set to true to enable write forwarding for both primary and secondary cluster.	bool	false	no
enable_immutable_backups	Determines whether immutable backups are enabled. this variable is overridden to be true for Gold/Prod.	bool	false	no
enable_memory_management	Enable improved memory management capabilities that proactively prevents stability issues and database restarts caused by insufficient free memory. Enabled by default	bool	true	no
enable_nlb_connectivity	Flag to create an NLB that can be used to connnect to the RDS Aurora Postgres. Only available in Test and Dev environments.	bool	false	no
engine_family	The db engine that this proxy will communicate with.	string	"POSTGRESQL"	no
engine_mode	Set to provisioned for serverless Aurora cluster.	string	"provisioned"	no
engine_type	Database engine type	string	"aurora-postgresql"	no
engine_version	The database engine version must be provided, minimum version 13.7. Please refer this AWS Documentation for compatible database engine versions: https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.VersionPolicy.html#Aurora.VersionPolicy.MajorVersions	string	"13.11"	no
extensions	List of extensions to be installed, such as aws_commons, aws_lambda	list(string)	[]	no
global_config	Specify globalDB parameters	
object({
    enabled                    = bool
    global_id                  = optional(string)
    secondary_region           = optional(string)
    private_subnets_secondary  = optional(list(string))
    secondary_db_instance_type = optional(string)
    secondary_replica_count    = optional(number)
  })
{
  "enabled": false,
  "global_id": "",
  "private_subnets_secondary": [],
  "secondary_db_instance_type": null,
  "secondary_region": "",
  "secondary_replica_count": null
}
no
global_id	Global identifier used to tie a primary RDS cluster to a secondary RDS cluster.	string	""	no
idle_client_timeout	The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it	number	null	no
instance_snapshot_id_for_clone	To be used for migration from RDS to Aurora - to create a new database from an instance provide a snapshot identifier.	string	null	no
is_serverless	Set to true for serverless Aurora cluster	bool	false	no
lightswitch_config	Environment specific configurations	
object({
    enabled = bool
    stop_action = optional(object({
      schedule = string
    }))
    start_action = optional(object({
      schedule = string
    }))
  })
{
  "enabled": false,
  "start_action": {
    "schedule": "cron(30 23 ? * SUN *)"
  },
  "stop_action": {
    "schedule": "cron(30 0 ? * SAT *)"
  }
}
no
max_capacity	max ACU for Serverless Aurora Cluster	number	6	no
migrated	If Aurora cluster is created as part of migration from RDS set to true, false otherwise	bool	false	no
min_capacity	min ACU for Serverless Aurora Cluster	number	1	no
monitoring_interval	The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance, valid values are;0, 1, 5, 10, 15, 30, 60.	string	5	no
non_schema_specific_users	Create non schema specific users. Selecting this will result in a single set of users being created that can read/write all schema. This will create two users for Read and Write (AuroraRead and AuroraReadWrite respectively). The AuroraAppAdmin user will still be schema specific.	bool	false	no
performance_insights_enabled	(Optional) Specifies whether Performance Insights is enabled or not.	bool	false	no
performance_insights_retention_period	The amount of time in days to retain Performance Insights data. Either 7 (7 days) or divisable by 31 and supported max 744 days (2 year).	number	7	no
pg_cluster_authentication_timeout	Parameter Group (pg_cluster_) parameter: Maximum number of seconds allowed for for DB connection authentication	string	""	no
pg_cluster_babelfish_status	Parameter Group (pg_cluster_) parameter: Sets the state of Babelfish for Aurora PostgreSQL; functionality. When this parameter is set to datatypesonly, Babelfish is turned off but SQL Server data types are still available. Allowed values: on, off, datatypesonly	string	"off"	no
pg_cluster_capture_plan_baselines	Parameter Group (pg_cluster_) parameter: Sets the apg_plan_mgmt.capture_plan_baselines within the postgres instance. Allowed values: manual, automatic, off	string	"off"	no
pg_cluster_effective_cache_size	Parameter Group (pg_cluster_) parameter: (8kB) Sets the planners assumption about the size of the disk cache. Allowed values: 1-2147483647. Default = {DBInstanceClassMemory/16384}	string	""	no
pg_cluster_global_db_rpo	Parameter Group (pg_cluster_) parameter: Sets the Recovery point objective (RPO) for an Aurora global database, measured in seconds. With an Aurora PostgreSQL–based global database, you can use the rds.global_db_rpo parameter to set and track the upper bound on RPO. Allowed values: 20-2147483647	string	""	no
pg_cluster_log_lock_waits	Parameter Group (pg_cluster_) parameter: (kB Log the use of temporary files larger than this number of kilobytes. Allowed values: -1 to 2147483647	bool	false	no
pg_cluster_log_min_duration_statement	Parameter Group (pg_cluster_) parameter: (kB Log the use of temporary files larger than this number of kilobytes. Allowed values: -1 to 2147483647	string	""	no
pg_cluster_log_temp_files	Parameter Group (pg_cluster_) parameter: (kB Log the use of temporary files larger than this number of kilobytes. Allowed values: -1 to 2147483647	number	-1	no
pg_cluster_logical_replication	Parameter Group (pg_cluster_) parameter: Enable logical replication. When this parameter is set to 1, logical replication is enabled. Allowed values: 0, 1. Default = 0	string	"0"	no
pg_cluster_max_logical_replication_workers	Parameter Group (pg_cluster_) parameter: Maximum number of logical replication worker processes. Allowed values: 0-262143.	string	""	no
pg_cluster_max_parallel_workers	Parameter Group (pg_cluster_) parameter: Sets the maximum number of parallel workers than can be active at one time. Allowed values: 0-1024	string	""	no
pg_cluster_max_parallel_workers_per_gather	Parameter Group (pg_cluster_) parameter: Sets the maximum number of parallel processes per executor node. Allowed values: 0-1024	string	""	no
pg_cluster_max_replication_slots	Parameter Group (pg_cluster_) parameter: Sets the maximum number of replication slots that the server can support. Allowed values: 5-262143. Default = 20	string	""	no
pg_cluster_max_wal_senders	Parameter Group (pg_cluster_) parameter: Sets the maximum number of simultaneously running WAL sender processes. Allowed values: 5-262143	number	10	no
pg_cluster_max_worker_processes	Parameter Group (pg_cluster_) parameter: Sets the maximum number of concurrent worker processes. Allowed values: 0-262143. Default = 8	string	""	no
pg_cluster_pg_stat_statements_max	Parameter Group (pg_cluster_) parameter: Sets the maximum number of statements tracked by pg_stat_statements. Allowed values: 100-2147483647	string	""	no
pg_cluster_pg_stat_statements_save	Parameter Group (pg_cluster_) parameter: Save pg_stat_statements statistics across server shutdowns. Allowed values: 0, 1	string	""	no
pg_cluster_pg_stat_statements_track	Parameter Group (pg_cluster_) parameter: XXXX	string	""	no
pg_cluster_query_execution_plan	Parameter Group (pg_cluster_) parameter: Enable or disable the apg_plan_mgmt extension.; functionality. When this parameter is set to 1, Query Plan Management is enabled. Allowed values: 0, 1	string	"0"	no
pg_cluster_shared_buffers	Parameter Group (pg_cluster_) parameter: (8kB) Sets the number of shared memory buffers used by the server. Allowed values: 16-1073741823. Default = {DBInstanceClassMemory/32768}	string	""	no
pg_cluster_synchronous_commit	Parameter Group (pg_cluster_) parameter: Sets the current transactions synchronization level. Allowed values: on (default), local, off	string	""	no
pg_cluster_temp_buffers	Parameter Group (pg_cluster_) parameter: Sets the maximum number of temporary buffers used by each session. Allowed values: 100-1073741823	string	""	no
pg_cluster_timezone	Parameter Group (pg_cluster_) parameter: Sets the time zone for displaying and interpreting time stamps. For more info visit: https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html#Aurora.Overview.LocalTimeZone	string	"UTC"	no
pg_cluster_track_commit_timestamp	Parameter Group (pg_cluster_) parameter: Collects transaction commit time. For more info visit: https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Reference.ParameterGroups.html	bool	false	no
pg_cluster_track_io_timing	Parameter Group (pg_cluster_) parameter: XXXX	string	""	no
pg_cluster_use_plan_baselines	Parameter Group (pg_cluster_) parameter: Sets the apg_plan_mgmt.use_plan_baselines within the postgres instance. Allowed values: true, false	string	"false"	no
pg_cluster_wal_buffers	Parameter Group (pg_cluster_) parameter: Sets the number of disk-page buffers in shared memory for WAL. Allowed values: -1-262143	string	""	no
pg_cluster_work_mem	Parameter Group (pg_cluster_) parameter: (kB) Sets the maximum memory to be used for query workspaces. Allowed values: 64-2147483647	string	""	no
pg_instance_effective_cache_size	Parameter Group (pg_instance_) parameter: (8kB) Sets the planners assumption about the size of the disk cache. Allowed values: 1-2147483647. Default = {DBInstanceClassMemory/16384}	string	""	no
pg_instance_log_lock_waits	Parameter Group (pg_instance_) parameter: log message is produced when a session waits longer than deadlock_timeout to acquire a lock	bool	false	no
pg_instance_log_min_duration_statement	Parameter Group (pg_instance_) parameter: Causes the duration of each completed statement to be logged if the statement ran for at least the specified amount of time	string	""	no
pg_instance_log_temp_files	Parameter Group (pg_instance_) parameter: (kB Log the use of temporary files larger than this number of kilobytes. Allowed values: -1 to 2147483647	number	-1	no
pg_instance_max_parallel_workers	Parameter Group (pg_instance_) parameter: Sets the maximum number of parallel workers than can be active at one time. Allowed values: 0-1024	string	""	no
pg_instance_max_parallel_workers_per_gather	Parameter Group (pg_instance_) parameter: Sets the maximum number of parallel processes per executor node. Allowed values: 0-1024	string	""	no
pg_instance_max_worker_processes	Parameter Group (pg_instance_) parameter: Sets the maximum number of concurrent worker processes. Allowed values: 0-262143. Default = 8	string	""	no
pg_instance_pg_stat_statements_max	Parameter Group (pg_instance_) parameter: Sets the maximum number of statements tracked by pg_stat_statements. Allowed values: 100-2147483647	string	""	no
pg_instance_pg_stat_statements_save	Parameter Group (pg_instance_) parameter: Save pg_stat_statements statistics across server shutdowns. Allowed values: 0, 1	string	""	no
pg_instance_pg_stat_statements_track	Parameter Group (pg_instance_) parameter: XXXXX	string	""	no
pg_instance_search_path	Parameter Group (pg_instance_) parameter: Sets the search_path within the postgres instance.	string	""	no
pg_instance_shared_buffers	Parameter Group (pg_instance_) parameter: (8kB) Sets the number of shared memory buffers used by the server. Allowed values: 16-1073741823. Default = {DBInstanceClassMemory/32768}	string	""	no
pg_instance_shared_preload_libraries	n/a	list(string)	
[
  "pg_stat_statements",
  "pg_cron"
]
no
pg_instance_synchronous_commit	Parameter Group (pg_instance_) parameter: Sets the current transactions synchronization level. Allowed values: on (default), local, off	string	""	no
pg_instance_temp_buffers	Parameter Group (pg_instance_) parameter: Sets the maximum number of temporary buffers used by each session. Allowed values: 100-1073741823	string	""	no
pg_instance_track_io_timing	Parameter Group (pg_instance_) parameter: XXXXX	string	""	no
pg_instance_wal_buffers	Parameter Group (pg_instance_) parameter: Sets the number of disk-page buffers in shared memory for WAL. Allowed values: -1-262143	string	""	no
pg_instance_work_mem	Parameter Group (pg_instance_) parameter: (kB) Sets the maximum memory to be used for query workspaces. Allowed values: 64-2147483647	string	""	no
point_in_time_for_clone	(Optional) To restore PITR to existing database then specify a restore time and source database identifier. Restore time in UTC timestamp. point_in_time_for_clone will be overridden if snapshot_id_for_clone variable is also specified. (Optional) Cluster resource ID of the source database cluster from which to restore. To be used for restoring a deleted cluster in the same account which still has a retained automatic backup available. Either you can use source_db_identifier or source_cluster_resource_id at a time. Either you can use restore_to_time or use_latest_restorable_time at a time.	
object(
    {
      restore_to_time  = string
      source_db_identifier = string
      source_cluster_resource_id = string
      restore_type  = string
      use_latest_restorable_time = bool
   }
  )
null	no
preferred_maintenance_window	Preferred maintenance window for db cluster. (UTC) e.g. wed:04:00-wed:04:30 https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#preferred_maintenance_window.	string	"sun:22:00-sun:23:00"	no
preferred_maintenance_window_instance	Preferred maintenance window for db instance. (UTC) e.g. wed:04:00-wed:04:30 https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster_instance#preferred_maintenance_window.	string	"sun:22:00-sun:23:00"	no
promotion_tier	used for migration via replica read cluster, set to 2 during migration and 0 for promotion	number	0	no
recovery_window_in_days	(Optional) Number of days that AWS Secrets Manager waits before it can delete a secret. This value can be 0 to force deletion without recovery or range from 7 to 30 days. The default value is 30.	number	30	no
replica_count	Number of read replicas for the database, this should be an integer between 0 and 15.	number	0	no
replication_source_identifier	ID of the primary cluster. This is used to signify to Terraform that there is a dependency between the primary and secondary clusters.	string	""	no
s3_import_enabled	Whether to enable the s3 import feature	bool	false	no
s3_import_iam_role_name	Name of role to associate with the cluster for s3 import, if s3_import_enabled is true.	string	null	no
scale_in_cooldown	(Optional) Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.	string	"300"	no
scale_out_cooldown	(Optional) Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.	string	"300"	no
serverless_db_type	For serverless set type: db.serverless	string	"db.serverless"	no
skip_final_snapshot	If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB cluster is deleted.	bool	true	no
snapshot_id_for_clone	To create a new database provide a snapshot identifier. This variable when specified will override point_in_time_for_clone variable	string	null	no
source_db_cluster_identifier	Required for building a Global DB from a single region Cluster. Input is the Cluster ARN of the cluster you wish to add to Global Region	any	null	no
storage_type	Specifies the storage type to be associated with the DB cluster. For Aurora DB clusters, storage_type modifications can be done in-place. Aurora I/O optimized storage is supported by versions 15.2 and higher, 14.7 and higher, and 13.10 and higher.	string	""	no
subnets	A list of private subnet names to be used in the Subnet Group, or other use-case(s). This will be compared to tag:Name tag against the subnets. Subnet ids are not supported.If not specified, Subnets will be selected based on the previous default for the module - to ensure backwards compatibility.	list(string)	[]	no
tags	(Optional) Additional tags (e.g. tomap({'BusinessUnit' = 'XYZ'})	map(string)	{}	no
target_value	(Required) Target value for the metric.	string	"75"	no
ver	n/a	string	"v1"	no
replica_db_instance_type	Specifies the db instance class type for replica db instances. If not specified, value specified for writer instance(var.database_instance_type) will be applied	map(string)	{}	no
max_slot_wal_keep_size	Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time. If max_slot_wal_keep_size is -1 (the default), replication slots may retain an unlimited amount of WAL files. Otherwise, if restart_lsn of a replication slot falls behind the current LSN by more than the given size, the standby using the slot may no longer be able to continue replication due to removal of required WAL files.	number	-1	no
default_transaction_isolation	You can set one of values serializable, repeatable read, read committed, read uncommitted.	string	null	no
Outputs
Name	Description
cluster_resource_id	The Aurora Postgres Cluster's Resource Identifier
datadog_user_secret_name	Datadog User secret manager name.
db_subnet_group_name	Name of Subnet Group Name for the Database Cluster
dms_user_arn	ARN of secret for user to integrate this cluster with AWS Database Migration Service
ggapgadmin_user_arn	ARN of secret for user to integrate this cluster with Oracle GoldenGate
global_cluster_identifier	The Global Cluster ID of the Aurora Postgres Global Cluster
nlb	A map of all NLB outputs for the network load balancer if NLB connectivity is enabled
rds_aurora_customer_managed_security_group_id	Empty Aurora security group for users to use to attach security group(s) from other services which needs to communicate with RDS cluster.
rds_cluster_arn	The ARN of the Aurora Postgres Cluster
rds_cluster_endpoint	The Endpoint name of the Aurora Postgres Cluster
rds_cluster_identifier	The Cluster ID of the Aurora Postgres Cluster
rds_db_name	The Name of the Aurora Postgres Database
rds_port	The Port of the Aurora Postgres Database
rds_proxy_arn	ARN of the RDS Proxy for the Aurora Postgres Cluster
rds_proxy_endpoint	The Endpoint name of the RDS Proxy for the Aurora Postgres Cluster
rds_reader_endpoint	A read-only endpoint for the cluster, automatically load-balanced across replicas
rdsmaster_arn	ARN of RDSMASTER secret
replica_db_instance_ca_identifier	Specifies the identifier of the CA certificate for the replica DB instance
secondary	Map of all RDS Aurora Postgres outputs for the secondary region if provisioning a global cluster
security_group_suffix	All security groups are created with this suffix. Useful for debugging.
subnet_ids	List of subent ids for the subnets the Database cluster resides in
writer_db_instance_ca_identifier	Specifies the identifier of the CA certificate for the writer DB instance
Parameter Group Settings
aurora_cluster_postgres_db_parameter_group_family: should be the same cluster group family as the new major version used. Example for 14.3 use aurora-postgresql14 aurora_instance_postgres_db_parameter_group_family: should be the same db group family as the new major version used. Example for 14.3 use aurora-postgresql14 For this module, the default engine version is 13.7. This is the minumum version supported.

Additional notes
Naming requirements – The names for each of the Aurora DB clusters must be unique, across all AWS Regions. The same name cannot be chosen for different Aurora DB clusters even though they are in different Regions. Aurora global databases can't fail over from a primary to a secondary DB cluster when the primary and secondary have different DB engine versions—whether major, minor, or patch version

Examples
Minimal
Provisioning a RDS Aurora PostgreSQL cluster with an Amazon KMS key.
# yaml-language-server: $schema=schema/nlbdb_schema.json
apiVersion: model/v1
kind: Model
metadata:
  type: InfraModel
  name: myapp
  version: v1
  sealID: "109894"
  mutable: true
spec:
  components:
    - type: KMS
      name: appdbkey
    - type: RDSAuroraPostgres
      name: appdb
      connectsTo:
        - type: KMS
          name: appdbkey
    - type: PrivateVPCEndpoints
      name: vpcendpnts
All Properties
apiVersion: deployment/v1
kind: Deployment
metadata:
  name: <a-name-for-your-deployment>
  model:
    name: <provide-your-model-name>
    version: v1 # Version that you have specified in your model file
  sealID: "<your-seal-id>"
spec:
  environment:
    awsAccountID: <Provide_aws_region_here>
    awsRegion: <Provide_aws_region_here>
    tfeOrganization: <Provide_tfe_organization_here>
  modulepack:
    name: default
    version: <Provide_ModulePack_Version_here>
  components:
    - name: appdbkey
      type: KMS
      action: apply
      properties:
        # Required
        key_alias: appdbkey
    - name: postgres
      type: RDSAuroraPostgres
      action: apply
      properties:
        aurora_cluster_postgres_db_parameter_group_family: <Provide_aurora_cluster_postgres_db_parameter_group_family_here> #Required parameter
        aurora_instance_postgres_db_parameter_group_family: <Provide_aurora_instance_postgres_db_parameter_group_family_here>  #Required parameter
        database_name: <Provide_database_name_here> #Required Parameter
        engine_version: <Provide_engine_type_here,minimum version 13.7>
        aurora_track_activity_query_size: <Provide_aurora_track_activity_query_size_here>
        auto-scaling: <Provide_scaling_here>
        auto-scaling_max_capacity: <Provide_auto-scaling_max_capacity_here>
        auto-scaling_min_capacity: <Provide_auto-scaling_min_capacity_here>
        ca_cert_identifier: <Provide_ca_cert_identifier_here>
        connection_pool_config: <Provide_connection_pool_config_here>
        custom_db_names: <Provide_custom_db_names_here>
        db_backup_retention_days: <Provide_db_backup_retention_days_here>
        db_instance_type: <Provide_db_instance_type_here>
        debug_logging: <Provide_debug_logging_here>
        deletion_protection: <Provide_deletion_protection_here>
        enable_immutable_backups: <Provide_enable_immutable_backups_here>
        enable_memory_management: <Provide_enable_memory_management_here>
        enable_nlb_connectivity: <Provide_enable_nlb_connectivity_here>
        engine_family: <Provide_engine_family_here>
        engine_mode: <Provide_engine_mode_here>
        engine_type: <Provide_engine_type_here>
        extensions: <Provide_extensions_here>
        global_config:
          enabled:  <Provide_enabled_here>
          global_id: <Provide_global_id_here>
          secondary_region: <Provide_secondary_region_here>
          private_subnets_secondary: <Provide_private_subnets_secondary_here>
          secondary_db_instance_type: <Provide_secondary_db_instance_type_here>
          secondary_replica_count: <Provide_secondary_replica_count_here>
        global_id: <Provide_global_id_here>
        idle_client_timeout: <Provide_idle_client_timeout_here>
        instance_snapshot_id_for_clone: <Provide_instance_snapshot_id_for_clone_here>
        is_serverless: <Provide_is_serverless_here>
        max_capacity: <Provide_max_capacity_here>
        migrated: <Provide_migrated_here>
        min_capacity:  <Provide_min_capacity_here>
        monitoring_interval: <Provide_monitoring_interval_here>
        non_schema_specific_users: <Provide_non_schema_specific_users_here>
        performance_insights_enabled: <Provide_performance_insights_enabled_here>
        performance_insights_retention_period: <Provide_performance_insights_enabled_here>
        pg_cluster_babelfish_status: <Provide_pg_cluster_babelfish_status_here>
        pg_cluster_capture_plan_baselines: <Provide_pg_cluster_capture_plan_baselines_here>
        pg_cluster_effective_cache_size: <Provide_pg_cluster_effective_cache_size_here>
        pg_cluster_log_lock_waits: <Provide_pg_cluster_log_lock_waits_here>
        pg_cluster_log_min_duration_statement: <Provide_pg_cluster_log_min_duration_statement_here>
        pg_cluster_max_parallel_workers: <Provide_pg_cluster_max_parallel_workers_here>
        pg_cluster_max_parallel_workers_per_gather: <Provide_pg_cluster_max_parallel_workers_per_gather_here>
        pg_cluster_max_wal_senders: <Provide_pg_cluster_max_wal_senders_here>
        pg_cluster_max_worker_processes: <Provide_pg_cluster_max_worker_processes_here>
        pg_cluster_pg_stat_statements_max: <Provide_pg_cluster_pg_stat_statements_max_here>
        pg_cluster_pg_stat_statements_save: <Provide_pg_cluster_pg_stat_statements_save_here>
        pg_cluster_query_execution_plan: <Provide_pg_cluster_query_execution_plan_here>
        pg_cluster_shared_buffers: <Provide_pg_cluster_shared_buffers_here>
        pg_cluster_synchronous_commit: <Provide_pg_cluster_synchronous_commit_here>
        pg_cluster_temp_buffers: <Provide_pg_cluster_temp_buffers_here>
        pg_cluster_timezone: <Provide_pg_cluster_timezone_here>
        pg_cluster_use_plan_baselines: <Provide_pg_cluster_use_plan_baselines_here>
        pg_cluster_wal_buffers: <Provide_pg_cluster_wal_buffers_here>
        pg_cluster_work_mem: <Provide_pg_cluster_work_mem_here>
        pg_instance_effective_cache_size: <Provide_pg_instance_effective_cache_size_here>
        pg_instance_log_lock_waits: <Provide_pg_instance_log_lock_waits_here>
        pg_instance_log_min_duration_statement: <Provide_pg_instance_log_min_duration_statement_here>
        pg_instance_max_parallel_workers: <Provide_pg_instance_max_parallel_workers_here>
        pg_instance_max_parallel_workers_per_gather: <Provide_pg_instance_max_parallel_workers_per_gather_here>
        pg_instance_max_worker_processes: <Provide_pg_instance_max_worker_processes_here>
        pg_instance_pg_stat_statements_max: <Provide_pg_instance_pg_stat_statements_max_here>
        pg_instance_pg_stat_statements_save: <Provide_pg_instance_pg_stat_statements_save_here>
        pg_instance_search_path: <Provide_pg_instance_search_path_here>
        pg_instance_shared_buffers: <Provide_pg_instance_shared_buffers_here>
        pg_instance_synchronous_commit: <Provide_pg_instance_synchronous_commit_here>
        pg_instance_temp_buffers: <Provide_pg_instance_temp_buffers_here>
        pg_instance_wal_buffers: <Provide_pg_instance_wal_buffers_here>
        pg_instance_work_mem: <Provide_pg_instance_work_mem_here>
        point_in_time_for_clone: <Provide_point_in_time_for_clone_here>
        promotion_tier: <provide_promotion_tier_here>
        pg_instance_pg_stat_statements_track: <provide_pg_instance_pg_stat_statements_track_here>
        pg_instance_track_io_timing: <provide_pg_instance_track_io_timing_here>
        pg_instance_shared_preload_libraries: <provide_pg_instance_shared_preload_libraries_here>
        pg_cluster_pg_stat_statements_track: <Provide_pg_cluster_pg_stat_statements_track_here>
        pg_cluster_track_io_timing: <provide_pg_cluster_track_io_timing_here>
        pg_cluster_track_commit_timestamp: <provide_pg_cluster_track_commit_timestamp_here>
        pg_cluster_max_replication_slots: <provide_pg_cluster_max_replication_slots_here>
        pg_cluster_max_logical_replication_workers: <provide_pg_cluster_max_logical_replication_workers_here>
        pg_cluster_logical_replication: <provide_pg_cluster_logical_replication_here>
        pg_cluster_global_db_rpo: <provide_pg_cluster_global_db_rpo_here>
        pg_cluster_authentication_timeout: <provide_pg_cluster_authentication_timeout_here>
        datadog_db_performance_monitoring_enabled: <provide_datadog_db_performance_monitoring_enabled_here>
        create_bitool_user: <provide_create_bitool_user_here>
        preferred_maintenance_window: <Provide_preferred_maintenance_window_here>
        preferred_maintenance_window_instance: <Provide_preferred_maintenance_window_instance_here>
        rds_proxy: <Provide_rds_proxy_here>
        recovery_window_in_days: <Provide_recovery_window_in_days_here>
        replica_count: <Provide_replica_count_here>
        replication_source_identifier: <Provide_replication_source_identifier_here>
        s3_import_enabled: <Provide_s3_import_enabled_here>
        s3_import_iam_role_name: <Provide_s3_import_iam_role_name_here>
        serverless_db_type: <Provide_serverless_db_type_here>
        skip_final_snapshot: <Provide_skip_final_snapshot_here>
        snapshot_id_for_clone: <Provide_snapshot_id_for_clone_here>
        storage_type: <Provide_storage_type_here>
        tags: <Provide_tags_here>
        subnets: <Provide_subnets_here>
        vpc_proxy_subnet_names: <Provide_vpc_proxy_subnet_names_here>
        vpc_subnet_names: <Provide_vpc_subnet_names_here>
        pg_instance_log_temp_files: <pg_instance_log_temp_files>
        pg_cluster_log_temp_files: <pg_cluster_log_temp_files>
      connectsTo:
        - type: KMS
          name: appdbkey
      dependsOn:
        - type: KMS
          name: appdbkey
        - type: PrivateVPCEndpoints
          name: vpcendpnts
Connecting to RDS Aurora Postgres using NLB
The Aurora PostgreSQL cluster is deployed in the private subnets. Provision an NLB in the public subnet to access the instances from lvdi. See Atlas's guide Connecting to AWS RDS Aurora Postgres using PGAdmin for detailed steps on connecting to RDS Aurora PostgreSQL instance using NLB. This capability is only available in dev and test AWS accounts and can be enabled by setting the optional parameter enable_nlb_connectivity to true.

apiVersion: model/v1
kind: Model
metadata:
  type: InfraModel
  name: appname
  version: "v1" # Version for your model Eg. v1 or v2
  sealID: "<your-seal-id>"
  mutable: <Select true or false>
spec:
  components:
    - type: KMS
      name: appdbkey
    - type: RDSAuroraPostgres
      name: appdb
      connectsTo:
        - type: KMS
          name: appdbkey
          ver: v1
    - type: PrivateVPCEndpoints
      name: vpcendpnts
Connect to an EKS Cluster
apiVersion: deployment/v1
kind: Deployment
metadata:
  name: <a-name-for-your-deployment>
  model:
    name: <provide-your-model-name>
    version: v1 # Version that you have specified in your model file
  sealID: "<your-seal-id>"
spec:
  environment:
    awsAccountID: <Provide_aws_region_here>
    awsRegion: <Provide_aws_region_here>
    tfeOrganization: <Provide_tfe_organization_here>
  modulepack:
    name: default
    version: <Provide_ModulePack_Version_here>
  components:
    - type: EKSClusterBase
      name: eksbase
      action: apply
      properties: {}
    - type: NATGateway
      name: natgateway
      action: apply
      properties: {}
    - type: PrivateVPCEndpoints
      name: vpcendpnts
      action: apply
      properties: {}
    - type: EKSCluster
      name: eks
      action: apply
      properties:
        jet_fid: <Provide_jet_fid_here>
        provision_fid: <Provide_provision_fid_here>
        namespaces:
          - name: <Provide_name_for_namespace>
            service_accounts:
              - name: <Provide_name_for_service_account_here>
                role: "eks-role-1"
      connectsTo:
        - type: RDSAuroraPostgres
          name: postgres
        - type: Roles
          name: roles
      dependsOn:
        - type: NATGateway
          name: natgateway
        - type: EKSClusterBase
          name: eksbase
        - type: PrivateVPCEndpoints
          name: vpcendpnts
    - type: KMS
      name: appdbkey
      action: apply
      properties:
        # Required
        key_alias: appdbkey
    - type: RDSAuroraPostgres
      name: postgres
      action: apply
      properties:
        aurora_cluster_postgres_db_parameter_group_family: aurora-postgresql13
        aurora_instance_postgres_db_parameter_group_family: aurora-postgresql13
        database_name: "<Provide_database_name_here>"
        engine_version: "<Provide_database_engine eg: 13.11,minimum version 13.7>"
      connectsTo:
        - type: KMS
          name: appdbkey
      dependsOn:
        - type: KMS
          name: appdbkey
        - type: PrivateVPCEndpoints
          name: vpcendpnts
    - type: Roles
      name: roles
      action: apply
      properties:
        roles:
          - access:
              - instanceVersion: v1
                name: postgres
                modelVersion: v1
                type: RDSAuroraPostgres
                permissions:
                  readwrite_access: true
            assumable_service:
              - eks.amazonaws.com
            name: "eks-role-1"
Sample of module in a pattern - ECS Preview Sample Files

Global
Amazon Aurora global databases span multiple AWS Regions, enabling low latency global reads and providing fast recovery from the rare outage that might affect an entire AWS Region. An Aurora global database has a primary DB cluster in one Region and secondary DB cluster in another region. The architecture is active-passive with secondary cluster acting as read-only. Write operations are directed to the primary DB cluster in the primary AWS Region. Aurora replicates data to the secondary AWS Region using dedicated infrastructure, with latency typically under a second.

Model file for global Aurora Postgres database

apiVersion: model/v1
kind: Model
metadata:
  type: InfraModel
  name: '<a-name-for-your-model>'
  version: "v1" # Version for your model Eg. v1 or v2
  sealID: "<your-seal-id>"
  mutable: <Select true or false>
spec:
  components:
    - type: KMS
      name: appdbkey
    - type: RDSAuroraPostgres
      name: appdb
      connectsTo:
        - type: KMS
          name: appdbkey
    - type: PrivateVPCEndpoints
      name: vpcendpnts
Connecting to the secondary region

Generating a token for the secondary cluster example: note the region change and reader endpoint. For more info see Connecting to PostgreSQL using pgAdmin

aws rds generate-db-auth-token --host rdsaurora102d9a1e-dev-v1-cluster.cluster-ro-cfhjx4yy3von.us-west-2.rds.amazonaws.com --port 6160 --region us-west-2 --username eacdbAuroraAppAdmin
Global database with 1 replica
A screenshot of an Aurora PostgreSQL configured as Global database with one replica. Notice the two clusters are in two AWS regions, and each region has a writer and reader instances spread across different availability zones. Set the replica_count to 1 to deploy like this.

aurora-postgresql-global-replica

Known Issues
Intermittently, the deployment would fail due Lambda function while configuring the database. The following log snippet will be observed in the pipeline logs. The workaround is to rerun the apply job again.
Error: Lambda function (RDSConfigureDatabase-rnbszbeb) returned error: ({"errorMessage": "connection to server at \"aurora-cluster-rnbszbeb.cluster-cnp0s6o45csd.us-east-1.rds.amazonaws.com\" (100.74.5.60), port 6160 failed: FATAL:  password authentication failed for user \"RDSMASTER\"\nconnection to server at \"aurora-cluster-rnbszbeb.cluster-cnp0s6o45csd.us-east-1.rds.amazonaws.com\" (100.74.5.60), port 6160 failed: FATAL:  no pg_hba.conf entry for host \"100.72.52.144\", user \"RDSMASTER\", database \"andydhruvdb\", SSL off\n", "errorType": "OperationalError", "stackTrace": ["  File \"/var/task/lambda_function.py\", line 71, in lambda_handler\n    conn = connect_as_master(db_name)\n", "  File \"/var/task/lambda_function.py\", line 136, in <lambda>\n    get_connection(username, password, db))\n", "  File \"/var/task/lambda_function.py\", line 132, in <lambda>\n    autocommit(psycopg2.connect(host=host, port=port, user=username, password=password, dbname=db)))\n", "  File \"/var/task/psycopg2/__init__.py\", line 122, in connect\n    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n"]})
with module.rds-aurora-postgres.aws_lambda_invocation.configure_database[0],
on .terraform/modules/rds-aurora-postgres/configure-database.tf line 162, in resource "aws_lambda_invocation" "configure_database":
162: resource "aws_lambda_invocation" "configure_database" {
F.A.Q
1. Can I convert an existing single region RDS Aurora PostgreSQL cluster into a global cluster with EaC?
No. If you attempt to convert it from a single region cluster into a global region cluster you will lose access to your data due to improper KMS key encryption change.

2. How can I convert an existing single region RDS Aurora PostgreSQL cluster into a global cluster with EaC?
This requires a blue/green deployment, using the snapshot from your existing cluster. Create a new deployment file with a new RDSAuroraPostgres component and restore data using the snapshot from your exisitng cluster. See the Global deployment example and the restore options.

3. Can I create a global Aurora PostgreSQL and deploy/connect with the Network Load Balancer component from the primary and secondary region?
Yes. When the enable_nlb_connectivity is set to true for a global Aurora Postgres deployment, Network LoadBalancer is created in primary as well as secondary region.

4. I have an existing RDS Aurora PostgreSQL cluster created from Kickstart or self-managed terraform, how can I manage it and all of it's resources using EaC?
TBD.

5. What are various data restore options?
Please refer to Restoring PostgreSQL data wiki.

6. How can I connect to my database to run queries?
Please refer to the How to connect to RDS Databases section for detailed info.

References
Database Restore Validation Guide for Aurora PostgreSQL
Connecting to PostgreSQL using pgAdmin
Aurora KMS encryption
Modules
Name	Source	Version
aurora_postgres_cluster_start	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/job-schedule/aws	1.2.1
aurora_postgres_cluster_stop	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/job-schedule/aws	1.2.1
db_subnet_group	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/db-subnet-group/aws	1.1.0
db_subnet_group_secondary	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/db-subnet-group/aws	1.1.0
jpm_data	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/jpm-data/aws	9.7.0
rds_aurora_postgres	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/rds-aurora-postgres/aws	7.11.2
rds_aurora_postgres_secondary	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/rds-aurora-postgres/aws	7.11.2
nlb	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/nlb/aws	13.1.0
nlb_secondary	tfe.jpmchase.net/ATLAS-MODULE-REGISTRY/nlb/aws	13.1.0
Resources
Name	Type
aws_ssm_parameter.rds_aurora_postgresql_connects_to_ssm	resource
aws_ssm_parameter.rds_aurora_postgresql_connects_to_ssm_secondary	resource
aws_ssm_parameter.rds_aurora_postgresql_photon-integration	resource
aws_ssm_parameter.rds_aurora_postgresql_photon_integration_secondary	resource
aws_ssm_parameter.test_connects_to_aurora_postgress	resource
aws_cloudformation_export.edge_security_group	data source
aws_cloudformation_export.vpc_id	data source
aws_cloudformation_export.vpc_id_secondary	data source
aws_ssm_parameter.kms_key_connects_to	data source
aws_ssm_parameter.kms_key_connects_to_secondary	data source
aws_ssm_parameter.lightswitch_connects_to	data source
aws_subnet.private_default	data source
aws_subnet.private_default_secondary	data source
aws_subnets.private_selected	data source
aws_subnets.private_selected_secondary	data source
aws_rds_cluster.rds_primary	data source
aws_rds_cluster.rds_secondary	data source
aws_secretsmanager_secret.rds_secret	data source
aws_security_group.customer_managed	data source
aws_security_group.customer_managed_secondary	data source
aws_subnets.private_default	data source
aws_subnets.private_default_secondary	data source
aws_backup_vault.core-immutable	data source
aws_iam_role.core-backup-runner	data source
Outputs
Name	Description
cluster_resource_id	n/a
dms_user_arn	n/a
kms_key_arn	The shared RDS KMS key arn.
rds_aurora_customer_managed_security_group_id	Empty Aurora security group for users to use to attach security group(s) from other services which needs to communicate with RDS cluster.
rds_aurora_postgres	n/a
rds_aurora_postgres_secondary	n/a
rds_cluster_endpoint	n/a
rds_cluster_identifier	n/a
rds_db_name	n/a
rds_port	n/a
rds_reader_endpoint	n/a
subnet_ids	n/a
subnet_ids_secondary	n/a
subnet_names	n/a
subnet_names_secondary	n/a
nlb_dns_name	DNS Name for the NLB in primary region if NLB connectivity is enabled
nlb_dns_name_secondary	DNS Name for the NLB in secondary region if NLB connectivity is enabled
Change Log
Modulepack 0.13.1
TBD

CCBEAAS-19365 - Upgrade rds-aurora-postgres to latest version 7.11.2- Bugfix
Modulepack 0.13.0
TBD

CCBEAAS-16613 - Upgrade rds-aurora-postgres to 7.3.5
Modulepack 0.12.2
TBD

CCBEAAS-16613 - Upgrade rds-aurora-postgres to 7.3.5
Modulepack 0.11.0
TBD

CCBEAAS-15151 - RDS Aurora postgres upgrade to v7.2.0
ModulePack 0.10.0
7/2/2024

CCBEAAS-15473 Changed to only perform LightSwitch Data lookup when lightswitch_config.enabled is set to true
CCBEAAS-8869 changed the location of service-configs ssm parameter
CCBEAAS-13637 Added support for different db_instance_type and replica_count for secondary region of a global database
CCBEAAS-14447 fix schema validation error
Modulepack 0.9.1
CCBEAAS-14238 - RDS Aurora postgres upgrade to v6.2.0
ModulePack 0.9.0
4/25/2024

CCBEAAS-8868 Added metadata with local.tags to Photon SSM parameters
Moduleoack 0.8.0
CCBEAAS-7881 - Enabled connectivity to RDS Aurora PostgreSQL database instances in each region using AWS Network LoadBalancer for Global Databases
CCBEAAS-8475 - RDS Aurora postgres upgrade to v4.7.0
ModulePack 0.8.0
2/29/2024

CCBEAAS-8709 Fixed issue with db subnet groups while upgrading from 0.7.1 to 0.8.0
CCBEAAS-7881
Enabled NLB connectivity for RDS Global tables in secondary region as well
Exposed variable to specify private subnets for secondary region in Global Tables configuration
CCBEAAS-4794 renamed photon ssm from /photon to /service-configs
CCBEAAS-8539 Enabled find_unused_ip property for the NLB in both primary and secondary region.
CCBEAAS-8475 rds-aurora-postgres module upgrade to 4.7.0
ModulePack 0.7.0
01/12/2024

CCBEAAS-6495 Modulepack: Enable RDSAuroraPostgres DB Restore Function
Updated to use tfbundle 1.3.6-20230811-JPMC
Depends on KMS component (NEW)
Bugs/misconfigurations fixed:
Deployed to the public subnets only. Now it's only to the private subnets. This requires Blue/Green deployment. Read more about this design change at rds_aurora_public_vs_private_subnet
Unable to upgrade postgresql version property in Terraform.
Unable to restore with EaC rds aurora component using blue/green because KMS key is shared. KMS component is now separated.
Unable to connect to DB using pgAdmin from VDI when rds aurora cluster is in the private subnets. NLB component added in EaC to connect to the RDS Aurora PostgreSQL. Other ways to connect
Enabled connectivity to RDS Aurora PostgreSQL database instances using AWS Network LoadBalancer.
ModulePack 0.6.0
11/16/2023

CCBEAAS-5095 default change to use graviton instance type db.r6g.large for db_instance_type property
CCBEAAS-4618 Upgraded rds-aurora-postgres module version to 4.0.0
CCBEAAS-5533 default change to 'ddl' for pg_cluster_log_statement property
CCBEAAS-4789 Enabled Photon integration with RDSAuroraPostgres Component
ON THIS PAGE

Overview
Upgrading from ModulePack 0.6.x
Service Integrations
Prerequisites
Properties
Outputs
Examples
Connect to an EKS Cluster
Known Issues
F.A.Q
References
Resources
Outputs
Change Log
Modulepack 0.13.1
Modulepack 0.13.0
Modulepack 0.12.2
Modulepack 0.11.0
ModulePack 0.10.0
Modulepack 0.9.1
ModulePack 0.9.0
Moduleoack 0.8.0
ModulePack 0.8.0
ModulePack 0.7.0
ModulePack 0.6.0
Back to Top
