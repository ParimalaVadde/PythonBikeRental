Sure! Here's the full documentation for your requested steps, along with the Git commands and the setup details:

---

## **Step-by-Step Documentation**

### 1. **Install EaC CLI**
If you're using **Dev Shell**:
- Install the EaC CLI with the following command:
  ```bash
  ds tool install eac-cli
  ```
- To verify that it's installed, run:
  ```bash
  eac
  ```

### 2. **Install Visual Studio Code (VS CODE)**
- Download and install VS CODE from the official site: [https://code.visualstudio.com/](https://code.visualstudio.com/).
- Install the **YAML Extension by Redhat** in VS CODE for autocompletion with EaC configuration files.

### 3. **Request Access**
To request access for your SID:
```bash
eac access request
```

### 4. **Register SID/FID**
Register your SID or FID to EaC using the following command:
```bash
eac user register -d <DOMAIN> -u <SID>
```
For example:
```bash
eac user register -d ASIAPAC -u N652959
```

### 5. **Show EaC Configuration**
To display the current configuration:
```bash
eac config show
```

### 6. **Configure EaC CLI**
1. **Fetch the latest modulepack version:**
   ```bash
   eac modulepack list
   ```

2. **Set your configuration values**:
   - Replace `<REPLACE_JIRA_ID>` and other placeholders with actual values.
   ```bash
   eac config set -c "<REPLACE_JIRA_ID> Deploying Infra with EaC"
   eac config set -v "<X.X.X> (replace with version)"
   eac config set -r ssh://git@<REPLACE_BITBUCKET_CLUSTER>:7999/<REPLACE_PROJECT_NAME>/<REPLACE_REPO_NAME>.git
   eac config set -f develop
   eac config set -b feature/eac-setup-tech-primer
   ```

   Example:
   ```bash
   eac config set -c "<XBSD-898> Deploying Infra with EaC, Enabling AWS Backups tool for rds aurora postgress"
   eac config set -v "<0.13.0>"
   eac config set -r ssh://git@bitbucketdc-ssh.jpmchase.net:7999/xbsd/xbsd-aurora-postgresql.git
   eac config set -f release
   eac config set -b release/aurora20
   ```

3. **Show your configuration** to verify:
   ```bash
   eac config show
   ```

4. **Navigate to your project directory**:
   ```bash
   cd I:\ds\xbsd-aurora-postgresql
   ```

---

### Deployment Steps

1. **Open Dev Shell** and navigate to your local Git repository:
   ```bash
   cd <path_to_your_git_clone>
   cd I:\ds\xbsd-aurora-postgresql
   ```

2. **Run the preflight** on the deployment file:
   ```bash
   eac deployment preflight -f ecs-aurora-InfraDeploy.yaml
   ```
   Example:
   ```bash
   eac deployment preflight -f aurora-Infra_Deploy_Test.yaml
   ```

3. **Run the Plan** on the deployment file:
   ```bash
   eac deployment plan -f ecs-aurora-InfraDeploy.yaml
   ```
   Example:
   ```bash
   eac deployment plan -f aurora-Infra_Deploy_Test.yaml
   ```

4. **Run the Apply** on the deployment file:
   ```bash
   eac deployment apply -f ecs-aurora-InfraDeploy.yaml -g <CHG_RECORD> --pr --pr-branch master
   ```
   Example:
   ```bash
   eac deployment apply -f aurora-Infra_Deploy_Test.yaml -g XBSD-898 --pr --pr-branch release
   ```

5. **Confirm the deployment** by clicking "yes".

6. **Provide your SID and credentials** when asked during the pull request creation.

7. **A pull request (PR)** with necessary changes will be created. Get the PR details from the DevShell log.

8. **Get the PR Approved and Merged** to `master` on Bitbucket by an authorized person.

9. **Once the PR is approved**, the Jules build will trigger automatically.

---

### Git Workflow (Local Changes)

Yes, it is okay to execute these commands in **`I:\ds\xbsd-aurora-postgresql`** as long as itâ€™s the root directory of your local Git repository, where the repository has been cloned.

### Steps:

1. **Create and Switch to a New Branch**:
   - First, ensure you're on the latest `release/aurora20` branch:
     ```bash
     git checkout release/aurora20
     git pull origin release/aurora20
     ```
   - Create and switch to a new feature branch:
     ```bash
     git checkout -b feature/your-branch-name
     ```

2. **Make Changes** (e.g., modify `aurora-Infra_Deploy_Test.yaml`).

3. **Stage, Commit, and Push** the Changes:
   - Stage the changes:
     ```bash
     git add aurora-Infra_Deploy_Test.yaml
     ```
   - Commit the changes with a message:
     ```bash
     git commit -m "<XBSD-898> Deploying Infra with EaC, Enabling AWS Backups tool for rds aurora postgress"
     ```
   - Push the feature branch to the remote repository:
     ```bash
     git push origin feature/your-branch-name
     ```

4. **Create a Pull Request (PR)** on Bitbucket from `feature/your-branch-name` to `release/aurora20`.

5. **Once the PR is Approved and Merged**, your changes will be applied to the `release/aurora20` branch as part of the deployment.

---

### Git Workflow (Pushing Changes to the Release Branch)

1. **Ensure Your Feature Branch Is Up to Date**:
   ```bash
   git fetch origin
   ```

2. **Rebase or Merge Your Feature Branch onto the Release Branch**:
   - **Rebase** (for cleaner history):
     ```bash
     git checkout feature/xbsd-aurora-postgresql-backup
     git rebase origin/release/aurora20
     ```

     After resolving conflicts (if any):
     ```bash
     git rebase --continue
     ```

   - **Merge** (alternative approach):
     ```bash
     git checkout release/aurora20
     git merge feature/xbsd-aurora-postgresql-backup
     ```

3. **Push the Changes to the Remote**:
   - If rebasing:
     ```bash
     git push origin feature/xbsd-aurora-postgresql-backup
     ```

   - If merging:
     ```bash
     git push origin release/aurora20
     ```

4. **Create a Pull Request (PR)** from your feature branch to `release/aurora20` on Bitbucket.

---

### Summary

1. **Clone the repository**: `git clone <repo-url>`
2. **Create a new branch**: `git checkout -b feature/my-feature`
3. **Make local changes**.
4. **Stage and commit** changes:
   - `git add .`
   - `git commit -m "Message"`
5. **Push the feature branch**: `git push origin feature/my-feature`
6. **Merge feature branch** into `release/aurora20` (via Git or PR).
7. **Push changes to the remote**: `git push origin release/aurora20`
8. **Create a PR** and request review.

Let me know if you need further details!
