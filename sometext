old code
# Transform `transformed_business_entity_details`
    transformed_business_entity_details = transformed_df.select(*ss.business_entity_details).join(
        transformed_json_df.select("stg_business_entity_id", "company_structure__corporate_structure"),
        on="stg_business_entity_id",
        how="left"
    ).withColumn(
        "company_structure",
        when(col("filter_individual") == "Y", "individual").otherwise(col("company_structure__corporate_structure"))
    ).drop("filter_individual", "company_structure__corporate_structure").dropDuplicates()

    # Add additional rows to `transformed_business_entity_details`
    for additional_row in [
        transformed_df.select(
            col("stg_jpmc_business_entity_id").alias("stg_business_entity_id"),
            lit("jpmc").alias("business_entity_name"),
            lit("").alias("company_structure"),
            lit("").alias("year_incorporated"),
            lit("").alias("reported_annual_revenue")
        ),
        transformed_df.select(
            col("stg_payor_business_entity_id").alias("stg_business_entity_id"),
            col("buying_entity").alias("business_entity_name"),
            lit("").alias("company_structure"),
            lit("").alias("year_incorporated"),
            lit("").alias("reported_annual_revenue")
        )
    ]:
        transformed_business_entity_details = transformed_business_entity_details.union(additional_row)
    
    transformed_business_entity_details = transformed_business_entity_details.withColumn(
        "business_entity_details_id",
        compute_uuid_udf(concat_ws(",", *[col for col in transformed_business_entity_details.columns]))
    )
    
    transformed_business_entity_details.show()
	
	



see now transformed_df itself has company_structure so didnt use transformed_json_df, but seems like code is not working

new code
# Transform `transformed_business_entity_details`
    transformed_business_entity_details = transformed_df.select(*ss.business_entity_details).withColumn(
    "company_structure",
    when(col("filter_individual") == "Y", "individual").otherwise(col("company_structure"))).drop("filter_individual").dropDuplicates()

    # Add additional rows to `transformed_business_entity_details`
    for additional_row in [
        transformed_df.select(
            col("stg_jpmc_business_entity_id").alias("stg_business_entity_id"),
            lit("jpmc").alias("business_entity_name"),
            lit("").alias("company_structure"),
            lit("").alias("year_incorporated"),
            lit("").alias("reported_annual_revenue")
        ),
        transformed_df.select(
            col("stg_payor_business_entity_id").alias("stg_business_entity_id"),
            col("client_name").alias("business_entity_name"),
            lit("").alias("company_structure"),
            lit("").alias("year_incorporated"),
            lit("").alias("reported_annual_revenue")
        )
    ]:
        transformed_business_entity_details = transformed_business_entity_details.union(additional_row)
    
    transformed_business_entity_details = transformed_business_entity_details.withColumn(
        "business_entity_details_id",
        compute_uuid_udf(concat_ws(",", *[col for col in transformed_business_entity_details.columns]))
    )
    
    transformed_business_entity_details.show()
