# Modified compute_uuid function - returns None for null inputs (gracefully handled)
def compute_uuid(*cols):
    try:
        # Check if all columns are null, empty, or whitespace-only
        has_valid_data = False
        
        for col in cols:
            if col is not None:
                col_str = str(col).strip()
                if col_str:  # Non-empty after stripping whitespace
                    has_valid_data = True
                    break
        
        # If no valid data found, return None (this won't create a dummy record)
        if not has_valid_data:
            return None
            
        # Concatenate all column values into a single string
        name = ','.join(str(col) if col is not None else '' for col in sorted(cols))
        
        # Generate MD5 digest
        digest = hashlib.md5(name.encode()).digest()
        
        # Generate UUID from the digest
        return str(uuid.UUID(bytes=digest))
        
    except Exception as e:
        print(f"Error in compute_uuid: {e}")
        return None

# Register the UDF
compute_uuid_udf = udf(utl.compute_uuid, StringType())

# Modified transformations - use CASE/WHEN logic to prevent calling UDF with null data
source_df = source_df.withColumn(
    "stg_business_entity_id",
    when(
        col("sds_supplier_id").isNotNull(), 
        col("sds_supplier_id")
    ).when(
        col("vendor_name_cleaned").isNotNull() & 
        (trim(col("vendor_name_cleaned")) != ""),
        compute_uuid_udf(col("vendor_name_cleaned"))  # Only call UDF when data exists
    )
    # NO .otherwise() - this means null values remain null, no dummy records created
)

print("stg_business_entity_id column added.")

source_df = source_df.withColumn(
    "stg_buying_entity",
    when(
        col("client_name").isNotNull() & 
        (trim(col("client_name")) != ""),
        compute_uuid_udf(col("client_name"))  # Only call UDF when data exists
    )
    # NO .otherwise() - this means null values remain null, no dummy records created
)

print("stg_buying_entity column added.")

# Filter out rows where UUID columns are null (these had no valid source data)
source_df = source_df.filter(
    col("stg_business_entity_id").isNotNull() & 
    col("stg_buying_entity").isNotNull()
)

print("Rows with null UUID values filtered out - ready for table insertion.")
