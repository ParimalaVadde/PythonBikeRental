Sure! Here's a **simple** guide for basic Git commands that you’ll use during development:

---

### 1. **Install and Set Up Git** (if not done already)
You can follow these steps to install and configure Git on your machine:
- Download and install Git from [here](https://git-scm.com/).
- Configure Git with your name and email:
  
  ```bash
  git config --global user.name "Your Name"
  git config --global user.email "your.email@example.com"
  ```

---

### 2. **Clone a Repository**
To clone a repository to your local machine:

```bash
git clone <repository-url>
```

For example:

```bash
git clone ssh://git@bitbucketdc-ssh.jpmchase.net:7999/xbsd/xbsd-aurora-postgresql.git
```

---

### 3. **Create a New Feature Branch**
Once you've cloned the repository and are inside the project directory:

1. Make sure you're on the correct base branch (usually `release/aurora20` or `develop`):
   
   ```bash
   git checkout release/aurora20  # Or whatever the base branch is
   ```

2. Create and switch to your **new feature branch**:
   
   ```bash
   git checkout -b feature/your-feature-branch-name
   ```

---

### 4. **Make Changes Locally**
Now, you can edit files locally (e.g., edit `aurora-Infra_Deploy_Test.yaml`). These changes are only local at this point.

---

### 5. **Stage and Commit Changes**
After making changes, you need to **stage** and **commit** them:

1. **Stage the changes**:
   
   ```bash
   git add .  # This stages all the changed files
   ```

2. **Commit the changes** with a message:

   ```bash
   git commit -m "Description of the changes, e.g., <XBSD-898> Deploying Infra with EaC"
   ```

---

### 6. **Push the Feature Branch to Remote**
To push your feature branch to the remote repository:

```bash
git push origin feature/your-feature-branch-name
```

This uploads your feature branch and commits to the remote repository.

---

### 7. **Merge Feature Branch into Release Branch**
To integrate your feature branch into the main branch (`release/aurora20`):

1. **Switch to the `release/aurora20` branch**:

   ```bash
   git checkout release/aurora20
   ```

2. **Merge your feature branch** into `release/aurora20`:

   ```bash
   git merge feature/your-feature-branch-name
   ```

   This brings your changes from the feature branch into the release branch.

3. **Resolve any merge conflicts** (if any). Git will help you identify where conflicts have occurred and you’ll need to manually resolve them.

4. After resolving conflicts (if any), **commit the merge**:

   ```bash
   git commit -m "Merged feature/your-feature-branch-name into release/aurora20"
   ```

---

### 8. **Push the Merged Changes to Remote**
To push the changes back to the remote `release/aurora20` branch:

```bash
git push origin release/aurora20
```

---

### 9. **Create a Pull Request (PR)**
After pushing your feature branch (or merged branch), go to your **Bitbucket** (or your Git platform) and create a **Pull Request** from your feature branch to the `release/aurora20` branch.

- Include any necessary details (e.g., Jira ticket) in the PR description.
- Request review and approval from the team.

Once the PR is approved, **merge** it into `release/aurora20` using Bitbucket's interface.

---

### 10. **What Happens When You Make Changes Locally?**
- **Local changes** will not automatically reflect on the main branch (`release/aurora20` or `master`).
- You need to **stage** and **commit** your changes locally.
- After committing, you'll **push** your changes to the remote repository (on a separate branch, usually).
- The changes will remain in your **feature branch** until a **PR** is created and merged into the main branch.
  
---

### Git Workflow Summary
1. **Clone repo**: `git clone <repo-url>`
2. **Create a new branch**: `git checkout -b feature/my-feature`
3. **Make changes locally** (edit files).
4. **Stage and commit**: 
   - `git add .`
   - `git commit -m "My changes"`
5. **Push the changes** to remote: `git push origin feature/my-feature`
6. **Merge feature branch** into `release/aurora20` (via Git or PR).
7. **Push merged branch**: `git push origin release/aurora20`
8. **Create a PR** and get it approved.

---

Let me know if any step needs further clarification!
