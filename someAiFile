# Transform `transformed_revenue`
    transformed_revenue = transformed_json_df.select(*ss.revenue).withColumnRenamed(
        "card_revenue__end_date", "end_date"
    )

    transformed_revenue = transformed_revenue.withColumn(
    "is_active", 
    lit(True)  # This creates a Boolean column with True values for all rows
    )
    
    date_columns = [
    'card_revenue__1m__start_date',
    'card_revenue__3m__start_date', 
    'card_revenue__12m__start_date'
    ]

    # # Method 1: Convert using to_date() and date_format()
    for col_name in date_columns:
        transformed_revenue = transformed_revenue.withColumn(
            col_name,
            F.date_format(
                F.to_date(F.col(col_name), "MM/dd/yyyy"),
                "yyyy-MM-dd"
            )
        )
    
    print("********************business_entity_card_revenues***************************************")
    print(sorted(transformed_revenue.columns))
    print("**********************************************************************************")
    transformed_revenue = transformed_revenue.withColumn(
        "revenue_id",
        compute_uuid_udf(struct(*transformed_revenue.columns))
    ).dropDuplicates()
    
    write_single_csv_to_s3_fixed(
        transformed_revenue,
        s3_bucket="app-id-111597-dep-id-114116-uu-id-9x0jt94siuto",
        s3_key="upsert/pfd_staging/transformed_revenue.csv",
        temp_path="s3://app-id-111597-dep-id-114116-uu-id-9x0jt94siuto/upsert/pfd_staging/_tmp"
    )
